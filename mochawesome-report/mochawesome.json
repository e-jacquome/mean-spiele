{
  "stats": {
    "suites": 6,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2019-11-10T20:16:55.989Z",
    "end": "2019-11-10T20:16:59.241Z",
    "duration": 3252,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "992b6a60-3dc9-40fb-8142-8dfcadc29ed1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 1425,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await shared_1.connectDB();\nserver = app_1.app.listen(0, host, () => {\n    shared_1.logger.info(`Node ${process.version}`);\n    const address = server.address();\n    if (address !== null && typeof address !== 'string') {\n        shared_1.logger.info(`Testserver lÃ¤uft: http://${host}:${address.port}`);\n    }\n    server.emit('testServerStarted');\n});",
          "err": {},
          "uuid": "23792178-c3d2-4bf2-b483-4a3e6935b23c",
          "parentUUID": "992b6a60-3dc9-40fb-8142-8dfcadc29ed1",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b4ce8b79-8dae-452f-ae5f-08d0bd59fd70",
          "title": "GET /spiele",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Alle Spiele",
              "fullTitle": "GET /spiele Alle Spiele",
              "timedOut": false,
              "duration": 170,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(path)\n    // Assertion = Expectation\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    // Promise\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    response.body.should.be.not.empty;\n    done();\n});",
              "err": {},
              "uuid": "657c471e-9abe-4dee-8a54-8858477fe86a",
              "parentUUID": "b4ce8b79-8dae-452f-ae5f-08d0bd59fd70",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "657c471e-9abe-4dee-8a54-8858477fe86a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 170,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9e2b9f50-bd61-40ad-ad4d-c8371a8e255b",
          "title": "GET /spiele/:id",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Spiel zu vorhandener ID",
              "fullTitle": "GET /spiele/:id Spiel zu vorhandener ID",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}/${idGetVorhanden}`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    // response.body enthaelt ein JSON-Objekt mit Atom-Links\n    const selfLink = response.body._links.self.href;\n    // http://chaijs.com/plugins/chai-string\n    selfLink.should.endWith(idGetVorhanden);\n    done();\n});",
              "err": {},
              "uuid": "99cc1a5a-14b7-4e3a-8cd9-741523719c22",
              "parentUUID": "9e2b9f50-bd61-40ad-ad4d-c8371a8e255b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kein Spiel zu nicht-vorhandener ID",
              "fullTitle": "GET /spiele/:id Kein Spiel zu nicht-vorhandener ID",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}/${idNichtVorhanden}`)\n    .expect(shared_1.HttpStatus.NOT_FOUND)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "38eb2fef-9caa-4fa1-bb66-99eaa8e240ee",
              "parentUUID": "9e2b9f50-bd61-40ad-ad4d-c8371a8e255b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spiel zu vorhandener ID mit ETag",
              "fullTitle": "GET /spiele/:id Spiel zu vorhandener ID mit ETag",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}/${idGetVorhanden}`)\n    .set('If-None-Match', '\"0\"')\n    .expect(shared_1.HttpStatus.NOT_MODIFIED)\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    .end((error, _) => {\n    if (error) {\n        return done(error);\n    }\n    done();\n});",
              "err": {},
              "uuid": "73c00353-6338-44b7-9fd0-bf479a203939",
              "parentUUID": "9e2b9f50-bd61-40ad-ad4d-c8371a8e255b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "99cc1a5a-14b7-4e3a-8cd9-741523719c22",
            "38eb2fef-9caa-4fa1-bb66-99eaa8e240ee",
            "73c00353-6338-44b7-9fd0-bf479a203939"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 48,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "11c9149f-3e6b-4a60-a408-8f7b46c3b78f",
          "title": "GET /spiele?...",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Spiele mit einem Titel, der ein \"e\" enthaelt",
              "fullTitle": "GET /spiele?... Spiele mit einem Titel, der ein \"e\" enthaelt",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const teilTitel = 'e';\nrequest(server)\n    .get(`${path}?titel=${teilTitel}`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    body.should.be.not.empty;\n    // Jedes Spiel hat einen Titel mit dem Teilstring 'e'\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    body.map((spiel) => spiel.titel).forEach((titel) => titel.should.contain(teilTitel));\n    done();\n});",
              "err": {},
              "uuid": "57ef088c-b28d-423c-926c-54c5734dc516",
              "parentUUID": "11c9149f-3e6b-4a60-a408-8f7b46c3b78f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Keine Spiele mit einem Titel, der \"XX\" enthaelt",
              "fullTitle": "GET /spiele?... Keine Spiele mit einem Titel, der \"XX\" enthaelt",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}?titel=XX`)\n    .expect(shared_1.HttpStatus.NOT_FOUND)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "84ab8855-00fd-4a82-b68e-5ac786fe6691",
              "parentUUID": "11c9149f-3e6b-4a60-a408-8f7b46c3b78f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mind. 1 Spiel mit dem Schlagwort \"SOLO\"",
              "fullTitle": "GET /spiele?... Mind. 1 Spiel mit dem Schlagwort \"SOLO\"",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const schlagwort = 'solo';\nrequest(server)\n    .get(`${path}?${schlagwort}=true`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    body.should.be.not.empty;\n    // Jedes Spiel hat im Array der Schlagwoerter \"solo\"\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    body.map((spiel) => spiel.schlagwoerter).forEach((s) => s.should.contain(`${schlagwort.toUpperCase()}`));\n    done();\n});",
              "err": {},
              "uuid": "994753ef-6c11-40b8-a641-137b6801db9d",
              "parentUUID": "11c9149f-3e6b-4a60-a408-8f7b46c3b78f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Min 1 Spiel mit dem Schlagwort \"TEAM\"",
              "fullTitle": "GET /spiele?... Min 1 Spiel mit dem Schlagwort \"TEAM\"",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const schlagwort = 'team';\nrequest(server)\n    .get(`${path}?team=true`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.should.be.not.empty;\n    body.map((spiel) => spiel.schlagwoerter).forEach((s) => s.should.contain(`${schlagwort.toUpperCase()}`));\n    done();\n});",
              "err": {},
              "uuid": "2d1c6cf3-4b6c-4c19-a658-24b819e70ca8",
              "parentUUID": "11c9149f-3e6b-4a60-a408-8f7b46c3b78f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "57ef088c-b28d-423c-926c-54c5734dc516",
            "84ab8855-00fd-4a82-b68e-5ac786fe6691",
            "994753ef-6c11-40b8-a641-137b6801db9d",
            "2d1c6cf3-4b6c-4c19-a658-24b819e70ca8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 80,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4c3e79d0-ac93-4853-ba8d-4e0f2232c1c5",
          "title": "POST /spiele",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "POST /spiele \"before all\" hook",
              "timedOut": false,
              "duration": 388,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    // Promise\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    ({ token } = response.body);\n    token.should.be.not.empty;\n    // synchroner Before-Hook\n    done();\n});",
              "err": {},
              "uuid": "1a2cff2a-fdba-4bff-b73f-b42dab29cb95",
              "parentUUID": "4c3e79d0-ac93-4853-ba8d-4e0f2232c1c5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Neues Spiel",
              "fullTitle": "POST /spiele Neues Spiel",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesSpiel)\n    .expect(shared_1.HttpStatus.CREATED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { location } = response.header;\n    location.should.be.not.empty;\n    // UUID: Muster von HEX-Ziffern\n    const indexLastSlash = location.lastIndexOf('/');\n    const idStr = location.substring(indexLastSlash + 1);\n    idStr.should.match(\n    /* eslint-disable-next-line max-len */\n    /[\\dA-Fa-f]{8}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{12}/u);\n    done();\n});",
              "err": {},
              "uuid": "5431aa98-066d-4254-bad9-2c1d1a1f334d",
              "parentUUID": "4c3e79d0-ac93-4853-ba8d-4e0f2232c1c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel mit ungueltigen Daten",
              "fullTitle": "POST /spiele Neues Spiel mit ungueltigen Daten",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesSpielInvalid)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.art.should.be.equal('Die Art eines Spieles muss BRETT oder KARTEN sein.');\n    body.rating.should.endWith('ist keine gueltige Bewertung.');\n    body.verlag.should.be.equal('Der Verlag eines Spieles muss RAVENSBURGER oder SCHMIDT sein.');\n    done();\n});",
              "err": {},
              "uuid": "ee915ec0-90cc-43ce-b832-cfbacb18ea48",
              "parentUUID": "4c3e79d0-ac93-4853-ba8d-4e0f2232c1c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel, aber der Titel existiert bereits",
              "fullTitle": "POST /spiele Neues Spiel, aber der Titel existiert bereits",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesSpielTitelExistiert)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.text.should.contain('Verlag');\n    done();\n});",
              "err": {},
              "uuid": "da973537-e1b7-4da8-89f2-ecf7ab1db32d",
              "parentUUID": "4c3e79d0-ac93-4853-ba8d-4e0f2232c1c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel, aber ohne Token",
              "fullTitle": "POST /spiele Neues Spiel, aber ohne Token",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .send(neuesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "054bf9ab-b130-470f-8d54-b2b9d3468c22",
              "parentUUID": "4c3e79d0-ac93-4853-ba8d-4e0f2232c1c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel, aber mit falschem Token",
              "fullTitle": "POST /spiele Neues Spiel, aber mit falschem Token",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', 'Bearer x')\n    .send(neuesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "6b44e182-c5c6-49b0-acb4-9102ddec32c6",
              "parentUUID": "4c3e79d0-ac93-4853-ba8d-4e0f2232c1c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5431aa98-066d-4254-bad9-2c1d1a1f334d",
            "ee915ec0-90cc-43ce-b832-cfbacb18ea48",
            "da973537-e1b7-4da8-89f2-ecf7ab1db32d",
            "054bf9ab-b130-470f-8d54-b2b9d3468c22",
            "6b44e182-c5c6-49b0-acb4-9102ddec32c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 99,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "45c5e1f6-145a-41b4-9929-6d95dbb79e27",
          "title": "PUT /spiele/:id",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "PUT /spiele/:id \"before all\" hook",
              "timedOut": false,
              "duration": 363,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    ({ token } = response.body);\n    token.should.be.not.empty;\n    done();\n});",
              "err": {},
              "uuid": "96c88095-7f39-42ee-8d27-0c1b7692ae99",
              "parentUUID": "45c5e1f6-145a-41b4-9929-6d95dbb79e27",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Vorhandenes Spiel aendern",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpiel)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error) => {\n    if (error) {\n        return done(error);\n    }\n    //response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "f07eed23-878f-4b78-bd2d-dc1b2e495b04",
              "parentUUID": "45c5e1f6-145a-41b4-9929-6d95dbb79e27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Nicht-vorhandenes Spiel aendern",
              "fullTitle": "PUT /spiele/:id Nicht-vorhandenes Spiel aendern",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutNichtVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpielIdNichtVorhanden)\n    .expect(shared_1.HttpStatus.PRECONDITION_FAILED)\n    .end(error => {\n    if (error) {\n        return done(error);\n    }\n    done();\n});",
              "err": {},
              "uuid": "80b23bc6-9fde-4fff-b076-273d060953e4",
              "parentUUID": "45c5e1f6-145a-41b4-9929-6d95dbb79e27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Vorhandenes Spiel aendern, aber mit ungueltigen Daten",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern, aber mit ungueltigen Daten",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpielInvalid)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.art.should.be.equal('Die Art eines Spieles muss BRETT oder KARTEN sein.');\n    body.rating.should.endWith('ist keine gueltige Bewertung.');\n    body.verlag.should.be.equal('Der Verlag eines Spieles muss RAVENSBURGER oder SCHMIDT sein.');\n    done();\n});",
              "err": {},
              "uuid": "c66ea3a9-6306-4aa8-9e98-196bfbb2a889",
              "parentUUID": "45c5e1f6-145a-41b4-9929-6d95dbb79e27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Vorhandenes Spiel aendern, aber ohne Token",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern, aber ohne Token",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "cf35f069-4c12-46b4-b00b-43ce8f7029b6",
              "parentUUID": "45c5e1f6-145a-41b4-9929-6d95dbb79e27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Vorhandenes Spiel aendern, aber mit falschem Token",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern, aber mit falschem Token",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', 'Bearer x')\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "fe2be9cc-125b-40b6-b622-b81254e2c29b",
              "parentUUID": "45c5e1f6-145a-41b4-9929-6d95dbb79e27",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f07eed23-878f-4b78-bd2d-dc1b2e495b04",
            "80b23bc6-9fde-4fff-b076-273d060953e4",
            "c66ea3a9-6306-4aa8-9e98-196bfbb2a889",
            "cf35f069-4c12-46b4-b00b-43ce8f7029b6",
            "fe2be9cc-125b-40b6-b622-b81254e2c29b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 62,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "47000b5f-c61b-456a-98ea-b2c1ec3275c8",
          "title": "DELETE /spiele",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "DELETE /spiele \"before all\" hook",
              "timedOut": false,
              "duration": 348,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    ({ token } = response.body);\n    token.should.be.not.empty;\n    done();\n});",
              "err": {},
              "uuid": "285b8ee4-f028-4d4b-9da4-f0618e1ca6e0",
              "parentUUID": "47000b5f-c61b-456a-98ea-b2c1ec3275c8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Vorhandenes Spiel loeschen",
              "fullTitle": "DELETE /spiele Vorhandenes Spiel loeschen",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .expect(shared_1.HttpStatus.NO_CONTENT)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "48ac5cb2-392d-445d-9891-15f7190fc1ef",
              "parentUUID": "47000b5f-c61b-456a-98ea-b2c1ec3275c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spiel loeschen, aber ohne Token",
              "fullTitle": "DELETE /spiele Spiel loeschen, aber ohne Token",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "7b394d92-4c71-4e88-b568-1d95ab1e4773",
              "parentUUID": "47000b5f-c61b-456a-98ea-b2c1ec3275c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spiel loeschen, aber mit falschem Token",
              "fullTitle": "DELETE /spiele Spiel loeschen, aber mit falschem Token",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .set('Authorization', 'Bearer x')\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "95bcd9d1-ef67-4f43-8569-3d8db37de926",
              "parentUUID": "47000b5f-c61b-456a-98ea-b2c1ec3275c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "48ac5cb2-392d-445d-9891-15f7190fc1ef",
            "7b394d92-4c71-4e88-b568-1d95ab1e4773",
            "95bcd9d1-ef67-4f43-8569-3d8db37de926"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 55,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.0.1"
    }
  }
}