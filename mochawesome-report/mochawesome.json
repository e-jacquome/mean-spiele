{
  "stats": {
    "suites": 6,
    "tests": 21,
    "passes": 17,
    "pending": 0,
    "failures": 4,
    "start": "2019-11-04T15:54:51.440Z",
    "end": "2019-11-04T15:54:54.150Z",
    "duration": 2710,
    "testsRegistered": 21,
    "passPercent": 80.95238095238095,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "10f73486-ae51-4094-95d3-c4fcb7ea892d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 1210,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await shared_1.connectDB();\nserver = app_1.app.listen(0, host, () => {\n    shared_1.logger.info(`Node ${process.version}`);\n    const address = server.address();\n    if (address !== null && typeof address !== 'string') {\n        shared_1.logger.info(`Testserver lÃ¤uft: http://${host}:${address.port}`);\n    }\n    server.emit('testServerStarted');\n});",
          "err": {},
          "uuid": "9aa47b9c-cde9-49bf-b0c0-34e750f82086",
          "parentUUID": "10f73486-ae51-4094-95d3-c4fcb7ea892d",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9f89602b-1ea4-4269-bf79-a3a6e9a4463b",
          "title": "GET /spiele",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Alle Spiele",
              "fullTitle": "GET /spiele Alle Spiele",
              "timedOut": false,
              "duration": 122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(path)\n    // Assertion = Expectation\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    // Promise\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    response.body.should.be.not.empty;\n    done();\n});",
              "err": {},
              "uuid": "315a4113-1a14-4247-a74d-8ba85f3db3b8",
              "parentUUID": "9f89602b-1ea4-4269-bf79-a3a6e9a4463b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "315a4113-1a14-4247-a74d-8ba85f3db3b8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 122,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9d2b00ed-d31d-43cd-a40c-3ab2c3e34c01",
          "title": "GET /spiele/:id",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Spiel zu vorhandener ID",
              "fullTitle": "GET /spiele/:id Spiel zu vorhandener ID",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}/${idGetVorhanden}`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    // response.body enthaelt ein JSON-Objekt mit Atom-Links\n    const selfLink = response.body._links.self.href;\n    // http://chaijs.com/plugins/chai-string\n    selfLink.should.endWith(idGetVorhanden);\n    done();\n});",
              "err": {},
              "uuid": "0f833f6a-d629-4b5e-88d6-2738551336cc",
              "parentUUID": "9d2b00ed-d31d-43cd-a40c-3ab2c3e34c01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kein Spiel zu nicht-vorhandener ID",
              "fullTitle": "GET /spiele/:id Kein Spiel zu nicht-vorhandener ID",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}/${idNichtVorhanden}`)\n    .expect(shared_1.HttpStatus.NOT_FOUND)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "e4f90262-469e-4d82-a9f1-83739fed3926",
              "parentUUID": "9d2b00ed-d31d-43cd-a40c-3ab2c3e34c01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spiel zu vorhandener ID mit ETag",
              "fullTitle": "GET /spiele/:id Spiel zu vorhandener ID mit ETag",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}/${idGetVorhanden}`)\n    .set('If-None-Match', '\"0\"')\n    .expect(shared_1.HttpStatus.NOT_MODIFIED)\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    .end((error, _) => {\n    if (error) {\n        return done(error);\n    }\n    done();\n});",
              "err": {},
              "uuid": "af879d0f-8867-4e02-9b88-361b0149c19b",
              "parentUUID": "9d2b00ed-d31d-43cd-a40c-3ab2c3e34c01",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0f833f6a-d629-4b5e-88d6-2738551336cc",
            "e4f90262-469e-4d82-a9f1-83739fed3926",
            "af879d0f-8867-4e02-9b88-361b0149c19b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 53,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c1b3b27d-ffb0-4c53-b06a-692b6a1bb676",
          "title": "GET /spiele?...",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Spiele mit einem Titel, der ein \"e\" enthaelt",
              "fullTitle": "GET /spiele?... Spiele mit einem Titel, der ein \"e\" enthaelt",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const teilTitel = 'e';\nrequest(server)\n    .get(`${path}?titel=${teilTitel}`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    body.should.be.not.empty;\n    // Jedes Spiel hat einen Titel mit dem Teilstring 'e'\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    body.map((spiel) => spiel.titel).forEach((titel) => titel.should.contain(teilTitel));\n    done();\n});",
              "err": {},
              "uuid": "13a9e8f4-d3c1-44b8-af75-fa0931bc9926",
              "parentUUID": "c1b3b27d-ffb0-4c53-b06a-692b6a1bb676",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Keine Spiele mit einem Titel, der \"XX\" enthaelt",
              "fullTitle": "GET /spiele?... Keine Spiele mit einem Titel, der \"XX\" enthaelt",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}?titel=XX`)\n    .expect(shared_1.HttpStatus.NOT_FOUND)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "75244d96-5937-4f3d-ad27-cfe1affceecf",
              "parentUUID": "c1b3b27d-ffb0-4c53-b06a-692b6a1bb676",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mind. 1 Spiel mit dem Schlagwort \"SOLO\"",
              "fullTitle": "GET /spiele?... Mind. 1 Spiel mit dem Schlagwort \"SOLO\"",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const schlagwort = 'solo';\nrequest(server)\n    .get(`${path}?${schlagwort}=true`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    body.should.be.not.empty;\n    // Jedes Spiel hat im Array der Schlagwoerter \"solo\"\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    body.map((spiel) => spiel.schlagwoerter).forEach((s) => s.should.contain(`${schlagwort.toUpperCase()}`));\n    done();\n});",
              "err": {},
              "uuid": "bcc5ff27-3caf-495c-a5da-b90f8bc70abf",
              "parentUUID": "c1b3b27d-ffb0-4c53-b06a-692b6a1bb676",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Min 1 Spiel mit dem Schlagwort \"TEAM\"",
              "fullTitle": "GET /spiele?... Min 1 Spiel mit dem Schlagwort \"TEAM\"",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const schlagwort = 'team';\nrequest(server)\n    .get(`${path}?team=true`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.should.be.not.empty;\n    body.map((spiel) => spiel.schlagwoerter).forEach((s) => s.should.contain(`${schlagwort.toUpperCase()}`));\n    done();\n});",
              "err": {},
              "uuid": "0025eada-b4c1-493f-9fc8-583971b5f4fa",
              "parentUUID": "c1b3b27d-ffb0-4c53-b06a-692b6a1bb676",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "13a9e8f4-d3c1-44b8-af75-fa0931bc9926",
            "75244d96-5937-4f3d-ad27-cfe1affceecf",
            "bcc5ff27-3caf-495c-a5da-b90f8bc70abf",
            "0025eada-b4c1-493f-9fc8-583971b5f4fa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 65,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3294baf9-8224-4398-b38c-79231ea1f953",
          "title": "POST /spiele",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "POST /spiele \"before all\" hook",
              "timedOut": false,
              "duration": 345,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    // Promise\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    ({ token } = response.body);\n    token.should.be.not.empty;\n    // synchroner Before-Hook\n    done();\n});",
              "err": {},
              "uuid": "2e4e9722-a5d2-44aa-860e-48f108f6a2d1",
              "parentUUID": "3294baf9-8224-4398-b38c-79231ea1f953",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Neues Spiel",
              "fullTitle": "POST /spiele Neues Spiel",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesSpiel)\n    .expect(shared_1.HttpStatus.CREATED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { location } = response.header;\n    location.should.be.not.empty;\n    // UUID: Muster von HEX-Ziffern\n    const indexLastSlash = location.lastIndexOf('/');\n    const idStr = location.substring(indexLastSlash + 1);\n    idStr.should.match(\n    /* eslint-disable-next-line max-len */\n    /[\\dA-Fa-f]{8}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{12}/u);\n    done();\n});",
              "err": {},
              "uuid": "cdbb0599-2a0b-4c2e-a9c7-0d17c9b87b1b",
              "parentUUID": "3294baf9-8224-4398-b38c-79231ea1f953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel mit ungueltigen Daten",
              "fullTitle": "POST /spiele Neues Spiel mit ungueltigen Daten",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesSpielInvalid)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.art.should.be.equal('Die Art eines Spieles muss BRETT oder KARTEN sein.');\n    body.rating.should.endWith('ist keine gueltige Bewertung.');\n    body.verlag.should.be.equal('Der Verlag eines Spieles muss RAVENSBURGER oder HSKA_VERLAG sein.');\n    done();\n});",
              "err": {
                "message": "AssertionError: expected 'Die Art eines Spiels muss BRETT oder KARTEN sein.' to equal 'Die Art eines Spieles muss BRETT oder KARTEN sein.'",
                "estack": "AssertionError: expected 'Die Art eines Spiels muss BRETT oder KARTEN sein.' to equal 'Die Art eines Spieles muss BRETT oder KARTEN sein.'\n    at Test.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js:303:32)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": "- Die Art eines Spiels muss BRETT oder KARTEN sein.\n+ Die Art eines Spieles muss BRETT oder KARTEN sein.\n"
              },
              "uuid": "d02dc424-987a-454a-9ca3-feea383ffa94",
              "parentUUID": "3294baf9-8224-4398-b38c-79231ea1f953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel, aber der Titel existiert bereits",
              "fullTitle": "POST /spiele Neues Spiel, aber der Titel existiert bereits",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesSpielTitelExistiert)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.text.should.contain('Titel');\n    done();\n});",
              "err": {
                "message": "AssertionError: expected '{\"verlag\":\"Der Verlag eines Spiels muss RAVENSBURGER oder SCHMIDT sein.\"}' to include 'Titel'",
                "estack": "AssertionError: expected '{\"verlag\":\"Der Verlag eines Spiels muss RAVENSBURGER oder SCHMIDT sein.\"}' to include 'Titel'\n    at Test.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js:319:34)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "ba4ed0ef-826d-4a84-942a-9f54c079fb03",
              "parentUUID": "3294baf9-8224-4398-b38c-79231ea1f953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel, aber ohne Token",
              "fullTitle": "POST /spiele Neues Spiel, aber ohne Token",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .send(neuesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "7e0a95ae-7003-40af-82d7-5dd8ad345a24",
              "parentUUID": "3294baf9-8224-4398-b38c-79231ea1f953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel, aber mit falschem Token",
              "fullTitle": "POST /spiele Neues Spiel, aber mit falschem Token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', 'Bearer x')\n    .send(neuesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "6bfa195e-f9e4-4aa3-89fd-0216debd42bd",
              "parentUUID": "3294baf9-8224-4398-b38c-79231ea1f953",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cdbb0599-2a0b-4c2e-a9c7-0d17c9b87b1b",
            "7e0a95ae-7003-40af-82d7-5dd8ad345a24",
            "6bfa195e-f9e4-4aa3-89fd-0216debd42bd"
          ],
          "failures": [
            "d02dc424-987a-454a-9ca3-feea383ffa94",
            "ba4ed0ef-826d-4a84-942a-9f54c079fb03"
          ],
          "pending": [],
          "skipped": [],
          "duration": 63,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "bb117b89-6492-48f8-a0f3-723d7ad7c8e4",
          "title": "PUT /spiele/:id",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "PUT /spiele/:id \"before all\" hook",
              "timedOut": false,
              "duration": 327,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    ({ token } = response.body);\n    token.should.be.not.empty;\n    done();\n});",
              "err": {},
              "uuid": "880db566-1441-40c3-b6f2-6fbad58bd8fd",
              "parentUUID": "bb117b89-6492-48f8-a0f3-723d7ad7c8e4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Vorhandenes Spiel aendern",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern",
              "timedOut": false,
              "duration": 9,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpiel)\n    .expect(shared_1.HttpStatus.NO_CONTENT)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {
                "message": "Error: expected 204 \"No Content\", got 400 \"Bad Request\"",
                "estack": "Error: expected 204 \"No Content\", got 400 \"Bad Request\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "a6b1349b-065d-4e6a-ac79-4b0f0132fd1c",
              "parentUUID": "bb117b89-6492-48f8-a0f3-723d7ad7c8e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Nicht-vorhandenes Spiel aendern",
              "fullTitle": "PUT /spiele/:id Nicht-vorhandenes Spiel aendern",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutNichtVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpielIdNichtVorhanden)\n    .expect(shared_1.HttpStatus.PRECONDITION_FAILED)\n    .end(error => {\n    if (error) {\n        return done(error);\n    }\n    done();\n});",
              "err": {},
              "uuid": "6db52a57-133b-4b6f-a859-867236758619",
              "parentUUID": "bb117b89-6492-48f8-a0f3-723d7ad7c8e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Vorhandenes Spiel aendern, aber mit ungueltigen Daten",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern, aber mit ungueltigen Daten",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpielInvalid)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.art.should.be.equal('Die Art eines Spieles muss BRETT oder KARTEN sein.');\n    body.rating.should.endWith('ist keine gueltige Bewertung.');\n    body.verlag.should.be.equal('Der Verlag eines Spieles muss RAVENSBURGER oder SCHMIDT sein.');\n    done();\n});",
              "err": {
                "message": "AssertionError: expected 'Die Art eines Spiels muss BRETT oder KARTEN sein.' to equal 'Die Art eines Spieles muss BRETT oder KARTEN sein.'",
                "estack": "AssertionError: expected 'Die Art eines Spiels muss BRETT oder KARTEN sein.' to equal 'Die Art eines Spieles muss BRETT oder KARTEN sein.'\n    at Test.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js:409:32)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": "- Die Art eines Spiels muss BRETT oder KARTEN sein.\n+ Die Art eines Spieles muss BRETT oder KARTEN sein.\n"
              },
              "uuid": "3ccfe157-2b6f-43ed-a4c0-e9e5bebcea6e",
              "parentUUID": "bb117b89-6492-48f8-a0f3-723d7ad7c8e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Vorhandenes Spiel aendern, aber ohne Token",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern, aber ohne Token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "7dce265f-8562-4717-a54e-2225ee4e99c4",
              "parentUUID": "bb117b89-6492-48f8-a0f3-723d7ad7c8e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Vorhandenes Spiel aendern, aber mit falschem Token",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern, aber mit falschem Token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', 'Bearer x')\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "ef47f7ee-329e-4849-ae84-40aa7dbdbbed",
              "parentUUID": "bb117b89-6492-48f8-a0f3-723d7ad7c8e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6db52a57-133b-4b6f-a859-867236758619",
            "7dce265f-8562-4717-a54e-2225ee4e99c4",
            "ef47f7ee-329e-4849-ae84-40aa7dbdbbed"
          ],
          "failures": [
            "a6b1349b-065d-4e6a-ac79-4b0f0132fd1c",
            "3ccfe157-2b6f-43ed-a4c0-e9e5bebcea6e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 42,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8a4b3ecd-3af4-4e74-b9e2-b7d4ab5426a9",
          "title": "DELETE /spiele",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "DELETE /spiele \"before all\" hook",
              "timedOut": false,
              "duration": 325,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    ({ token } = response.body);\n    token.should.be.not.empty;\n    done();\n});",
              "err": {},
              "uuid": "211c8b13-1786-468a-8c88-27d92fd3e97f",
              "parentUUID": "8a4b3ecd-3af4-4e74-b9e2-b7d4ab5426a9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Vorhandenes Spiel loeschen",
              "fullTitle": "DELETE /spiele Vorhandenes Spiel loeschen",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .expect(shared_1.HttpStatus.NO_CONTENT)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "5e553e06-9cb8-4b68-bdc2-b338b5ea2e53",
              "parentUUID": "8a4b3ecd-3af4-4e74-b9e2-b7d4ab5426a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spiel loeschen, aber ohne Token",
              "fullTitle": "DELETE /spiele Spiel loeschen, aber ohne Token",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "de041b0d-a13d-49ca-9888-072276b93121",
              "parentUUID": "8a4b3ecd-3af4-4e74-b9e2-b7d4ab5426a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spiel loeschen, aber mit falschem Token",
              "fullTitle": "DELETE /spiele Spiel loeschen, aber mit falschem Token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .set('Authorization', 'Bearer x')\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "c363c2d2-5802-42cd-a629-4a1719cdb92c",
              "parentUUID": "8a4b3ecd-3af4-4e74-b9e2-b7d4ab5426a9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5e553e06-9cb8-4b68-bdc2-b338b5ea2e53",
            "de041b0d-a13d-49ca-9888-072276b93121",
            "c363c2d2-5802-42cd-a629-4a1719cdb92c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.0.1"
    }
  }
}