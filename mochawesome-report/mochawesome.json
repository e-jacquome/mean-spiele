{
  "stats": {
    "suites": 6,
    "tests": 21,
    "passes": 14,
    "pending": 0,
    "failures": 7,
    "start": "2019-11-03T11:06:53.634Z",
    "end": "2019-11-03T11:06:56.698Z",
    "duration": 3064,
    "testsRegistered": 21,
    "passPercent": 66.66666666666666,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a03acdc7-a603-475c-a1c4-75f4a9fec2c1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 1273,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await shared_1.connectDB();\nserver = app_1.app.listen(0, host, () => {\n    shared_1.logger.info(`Node ${process.version}`);\n    const address = server.address();\n    if (address !== null && typeof address !== 'string') {\n        shared_1.logger.info(`Testserver lÃ¤uft: http://${host}:${address.port}`);\n    }\n    server.emit('testServerStarted');\n});",
          "err": {},
          "uuid": "b6618582-eedc-430f-958c-eb1cf19c809a",
          "parentUUID": "a03acdc7-a603-475c-a1c4-75f4a9fec2c1",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a640c7a8-08c2-4145-8fd5-e19f90f9e7c4",
          "title": "GET /spiele",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Alle Spiele",
              "fullTitle": "GET /spiele Alle Spiele",
              "timedOut": false,
              "duration": 194,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(path)\n    // Assertion = Expectation\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    // Promise\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    response.body.should.be.not.empty;\n    done();\n});",
              "err": {},
              "uuid": "a9a84b6e-eb31-4125-bba9-07cd8ccdf17b",
              "parentUUID": "a640c7a8-08c2-4145-8fd5-e19f90f9e7c4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a9a84b6e-eb31-4125-bba9-07cd8ccdf17b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 194,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f5c4d198-f863-4374-8c2a-bcbe0ed3ba31",
          "title": "GET /spiele/:id",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Spiel zu vorhandener ID",
              "fullTitle": "GET /spiele/:id Spiel zu vorhandener ID",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}/${idGetVorhanden}`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    // response.body enthaelt ein JSON-Objekt mit Atom-Links\n    const selfLink = response.body._links.self.href;\n    // http://chaijs.com/plugins/chai-string\n    selfLink.should.endWith(idGetVorhanden);\n    done();\n});",
              "err": {},
              "uuid": "fee9a7fa-5c66-4c18-bf9c-d9b6ac39b86e",
              "parentUUID": "f5c4d198-f863-4374-8c2a-bcbe0ed3ba31",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kein Spiel zu nicht-vorhandener ID",
              "fullTitle": "GET /spiele/:id Kein Spiel zu nicht-vorhandener ID",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}/${idNichtVorhanden}`)\n    .expect(shared_1.HttpStatus.NOT_FOUND)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "3f52c645-75e3-484b-897a-e4a978928987",
              "parentUUID": "f5c4d198-f863-4374-8c2a-bcbe0ed3ba31",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spiel zu vorhandener ID mit ETag",
              "fullTitle": "GET /spiele/:id Spiel zu vorhandener ID mit ETag",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}/${idGetVorhanden}`)\n    .set('If-None-Match', '\"0\"')\n    .expect(shared_1.HttpStatus.NOT_MODIFIED)\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    .end((error, _) => {\n    if (error) {\n        return done(error);\n    }\n    done();\n});",
              "err": {},
              "uuid": "1e7888ce-2924-40de-9995-9072b3e82304",
              "parentUUID": "f5c4d198-f863-4374-8c2a-bcbe0ed3ba31",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fee9a7fa-5c66-4c18-bf9c-d9b6ac39b86e",
            "3f52c645-75e3-484b-897a-e4a978928987",
            "1e7888ce-2924-40de-9995-9072b3e82304"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 106,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ae0e7c14-41af-4f19-877b-c620a41aedb7",
          "title": "GET /spiele?...",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Spiele mit einem Titel, der ein \"e\" enthaelt",
              "fullTitle": "GET /spiele?... Spiele mit einem Titel, der ein \"e\" enthaelt",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const teilTitel = 'e';\nrequest(server)\n    .get(`${path}?titel=${teilTitel}`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    body.should.be.not.empty;\n    // Jedes Buch hat einen Titel mit dem Teilstring 'a'\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    body.map((buch) => buch.titel).forEach((titel) => titel.should.contain(teilTitel));\n    done();\n});",
              "err": {},
              "uuid": "31350d92-bc39-455f-9a39-a413502bc6c2",
              "parentUUID": "ae0e7c14-41af-4f19-877b-c620a41aedb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Keine Spiele mit einem Titel, der \"XX\" enthaelt",
              "fullTitle": "GET /spiele?... Keine Spiele mit einem Titel, der \"XX\" enthaelt",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}?titel=XX`)\n    .expect(shared_1.HttpStatus.NOT_FOUND)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "7f87da52-55e3-4b3e-89bd-52503a87e221",
              "parentUUID": "ae0e7c14-41af-4f19-877b-c620a41aedb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mind. 1 Spiel mit dem Schlagwort \"SOLO\"",
              "fullTitle": "GET /spiele?... Mind. 1 Spiel mit dem Schlagwort \"SOLO\"",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const schlagwort = 'solo';\nrequest(server)\n    .get(`${path}?${schlagwort}=true`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    body.should.be.not.empty;\n    // Jedes Buch hat im Array der Schlagwoerter \"javascript\"\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    body.map((spiel) => spiel.schlagwoerter).forEach((s) => s.should.contain(`${schlagwort.toUpperCase()}`));\n    done();\n});",
              "err": {},
              "uuid": "31a55b25-edee-4770-8440-bbe04bec9990",
              "parentUUID": "ae0e7c14-41af-4f19-877b-c620a41aedb7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Min 1 Spiel mit dem Schlagwort \"TEAM\"",
              "fullTitle": "GET /spiele?... Min 1 Spiel mit dem Schlagwort \"TEAM\"",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const schlagwort = 'team';\nrequest(server)\n    .get(`${path}?team=true`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.should.be.not.empty;\n    body.map((spiel) => spiel.schlagwoerter).forEach((s) => s.should.contain(`${schlagwort.toUpperCase()}`));\n    done();\n});",
              "err": {},
              "uuid": "2a43d57c-d2e0-44fe-a773-7d9d582a66e6",
              "parentUUID": "ae0e7c14-41af-4f19-877b-c620a41aedb7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "31350d92-bc39-455f-9a39-a413502bc6c2",
            "7f87da52-55e3-4b3e-89bd-52503a87e221",
            "31a55b25-edee-4770-8440-bbe04bec9990",
            "2a43d57c-d2e0-44fe-a773-7d9d582a66e6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 90,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "fdb1f74e-14b0-46c0-b12c-2623a9da4d16",
          "title": "POST /spiele",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "POST /spiele \"before all\" hook",
              "timedOut": false,
              "duration": 427,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    // Promise\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    ({ token } = response.body);\n    token.should.be.not.empty;\n    // synchroner Before-Hook\n    done();\n});",
              "err": {},
              "uuid": "f828217d-0ae8-4dd3-9514-590fd3868528",
              "parentUUID": "fdb1f74e-14b0-46c0-b12c-2623a9da4d16",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Neues Spiel",
              "fullTitle": "POST /spiele Neues Spiel",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesSpiel)\n    .expect(shared_1.HttpStatus.CREATED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { location } = response.header;\n    location.should.be.not.empty;\n    // UUID: Muster von HEX-Ziffern\n    const indexLastSlash = location.lastIndexOf('/');\n    const idStr = location.substring(indexLastSlash + 1);\n    idStr.should.match(\n    /* eslint-disable-next-line max-len */\n    /[\\dA-Fa-f]{8}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{12}/u);\n    done();\n});",
              "err": {
                "message": "Error: expected 201 \"Created\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 201 \"Created\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "452b5de4-64c3-40f2-a16d-ce60794eec72",
              "parentUUID": "fdb1f74e-14b0-46c0-b12c-2623a9da4d16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel mit ungueltigen Daten",
              "fullTitle": "POST /spiele Neues Spiel mit ungueltigen Daten",
              "timedOut": false,
              "duration": 12,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesSpielInvalid)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.art.should.be.equal('Die Art eines Buches muss BRETT oder KARTEN sein.');\n    body.rating.should.endWith('ist keine gueltige Bewertung.');\n    body.verlag.should.be.equal('Der Verlag eines Buches muss RAVENSBURGER oder HSKA_VERLAG sein.');\n    done();\n});",
              "err": {
                "message": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "d3711429-28fe-42d4-a623-06ea80d96171",
              "parentUUID": "fdb1f74e-14b0-46c0-b12c-2623a9da4d16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel, aber der Titel existiert bereits",
              "fullTitle": "POST /spiele Neues Spiel, aber der Titel existiert bereits",
              "timedOut": false,
              "duration": 9,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesSpielTitelExistiert)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.text.should.contain('Titel');\n    done();\n});",
              "err": {
                "message": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "ae2edd34-023e-434e-b5b0-33fed4ffdca3",
              "parentUUID": "fdb1f74e-14b0-46c0-b12c-2623a9da4d16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel, aber ohne Token",
              "fullTitle": "POST /spiele Neues Spiel, aber ohne Token",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .send(neuesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "715dc354-8ae0-413f-824f-a93fa8e9032e",
              "parentUUID": "fdb1f74e-14b0-46c0-b12c-2623a9da4d16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel, aber mit falschem Token",
              "fullTitle": "POST /spiele Neues Spiel, aber mit falschem Token",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', 'Bearer x')\n    .send(neuesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "befb115d-70b5-400c-bef4-c8c5c250b58d",
              "parentUUID": "fdb1f74e-14b0-46c0-b12c-2623a9da4d16",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "715dc354-8ae0-413f-824f-a93fa8e9032e",
            "befb115d-70b5-400c-bef4-c8c5c250b58d"
          ],
          "failures": [
            "452b5de4-64c3-40f2-a16d-ce60794eec72",
            "d3711429-28fe-42d4-a623-06ea80d96171",
            "ae2edd34-023e-434e-b5b0-33fed4ffdca3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 55,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4fa188bb-ea8f-4404-896f-cad08c7ebc6c",
          "title": "PUT /spiele/:id",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "PUT /spiele/:id \"before all\" hook",
              "timedOut": false,
              "duration": 341,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    ({ token } = response.body);\n    token.should.be.not.empty;\n    done();\n});",
              "err": {},
              "uuid": "f501a625-246a-419a-a84d-6a9da95ddec4",
              "parentUUID": "4fa188bb-ea8f-4404-896f-cad08c7ebc6c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Vorhandenes Spiel aendern",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpiel)\n    .expect(shared_1.HttpStatus.NO_CONTENT)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {
                "message": "Error: expected 204 \"No Content\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 204 \"No Content\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "2b37efef-32a2-4e39-8e8a-840c2b8d3464",
              "parentUUID": "4fa188bb-ea8f-4404-896f-cad08c7ebc6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Nicht-vorhandenes Spiel aendern",
              "fullTitle": "PUT /spiele/:id Nicht-vorhandenes Spiel aendern",
              "timedOut": false,
              "duration": 19,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutNichtVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpielIdNichtVorhanden)\n    .expect(shared_1.HttpStatus.PRECONDITION_FAILED)\n    .end(error => {\n    if (error) {\n        return done(error);\n    }\n    done();\n});",
              "err": {
                "message": "Error: expected 412 \"Precondition Failed\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 412 \"Precondition Failed\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "bab81a8f-9d92-43b2-bf7b-30da4179d6cc",
              "parentUUID": "4fa188bb-ea8f-4404-896f-cad08c7ebc6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Vorhandenes Spiel aendern, aber mit ungueltigen Daten",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern, aber mit ungueltigen Daten",
              "timedOut": false,
              "duration": 8,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpielInvalid)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.art.should.be.equal('Die Art eines Spieles muss BRETT oder KARTEN sein.');\n    body.rating.should.endWith('ist keine gueltige Bewertung.');\n    body.verlag.should.be.equal('Der Verlag eines Buches muss RAVENSBURGER oder SCHMIDT sein.');\n    done();\n});",
              "err": {
                "message": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "e946f252-d214-4e96-b487-b484c5f20227",
              "parentUUID": "4fa188bb-ea8f-4404-896f-cad08c7ebc6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Vorhandenes Spiel aendern, aber ohne Token",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern, aber ohne Token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "17ee8a8a-28ff-45d1-bf15-df39f66d0666",
              "parentUUID": "4fa188bb-ea8f-4404-896f-cad08c7ebc6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Vorhandenes Spiel aendern, aber mit falschem Token",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern, aber mit falschem Token",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', 'Bearer x')\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "6ae2e7f5-bd70-4b38-904d-77363c3b8ca3",
              "parentUUID": "4fa188bb-ea8f-4404-896f-cad08c7ebc6c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "17ee8a8a-28ff-45d1-bf15-df39f66d0666",
            "6ae2e7f5-bd70-4b38-904d-77363c3b8ca3"
          ],
          "failures": [
            "2b37efef-32a2-4e39-8e8a-840c2b8d3464",
            "bab81a8f-9d92-43b2-bf7b-30da4179d6cc",
            "e946f252-d214-4e96-b487-b484c5f20227"
          ],
          "pending": [],
          "skipped": [],
          "duration": 47,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "bbf6264d-82a4-41d6-a702-f8a03c1ac94a",
          "title": "DELETE /spiele",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "DELETE /spiele \"before all\" hook",
              "timedOut": false,
              "duration": 338,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    ({ token } = response.body);\n    token.should.be.not.empty;\n    done();\n});",
              "err": {},
              "uuid": "b750c4c5-5393-472c-9819-f2af8827a5e7",
              "parentUUID": "bbf6264d-82a4-41d6-a702-f8a03c1ac94a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Vorhandenes Spiel loeschen",
              "fullTitle": "DELETE /spiele Vorhandenes Spiel loeschen",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .expect(shared_1.HttpStatus.NO_CONTENT)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {
                "message": "Error: expected 204 \"No Content\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 204 \"No Content\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "3203a9cc-10f4-4eba-9da8-828efbf1c812",
              "parentUUID": "bbf6264d-82a4-41d6-a702-f8a03c1ac94a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spiel loeschen, aber ohne Token",
              "fullTitle": "DELETE /spiele Spiel loeschen, aber ohne Token",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "7d1adc7f-f3f2-478c-bd94-991a3f4868f2",
              "parentUUID": "bbf6264d-82a4-41d6-a702-f8a03c1ac94a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spiel loeschen, aber mit falschem Token",
              "fullTitle": "DELETE /spiele Spiel loeschen, aber mit falschem Token",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .set('Authorization', 'Bearer x')\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "cc77f451-a1f4-44e0-9908-4e509b0285a8",
              "parentUUID": "bbf6264d-82a4-41d6-a702-f8a03c1ac94a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d1adc7f-f3f2-478c-bd94-991a3f4868f2",
            "cc77f451-a1f4-44e0-9908-4e509b0285a8"
          ],
          "failures": [
            "3203a9cc-10f4-4eba-9da8-828efbf1c812"
          ],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.0.1"
    }
  }
}