{
  "stats": {
    "suites": 6,
    "tests": 21,
    "passes": 14,
    "pending": 0,
    "failures": 7,
    "start": "2019-11-04T11:56:30.925Z",
    "end": "2019-11-04T11:56:34.847Z",
    "duration": 3922,
    "testsRegistered": 21,
    "passPercent": 66.66666666666666,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "01adb8d1-a390-4f3b-b7be-68130b43dcb5",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 1572,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await shared_1.connectDB();\nserver = app_1.app.listen(0, host, () => {\n    shared_1.logger.info(`Node ${process.version}`);\n    const address = server.address();\n    if (address !== null && typeof address !== 'string') {\n        shared_1.logger.info(`Testserver lÃ¤uft: http://${host}:${address.port}`);\n    }\n    server.emit('testServerStarted');\n});",
          "err": {},
          "uuid": "51813ef2-bb92-4edc-8f9d-6a0757332747",
          "parentUUID": "01adb8d1-a390-4f3b-b7be-68130b43dcb5",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "77177781-e90b-41e2-b139-c1413b6fb7d7",
          "title": "GET /spiele",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Alle Spiele",
              "fullTitle": "GET /spiele Alle Spiele",
              "timedOut": false,
              "duration": 272,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(path)\n    // Assertion = Expectation\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    // Promise\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    response.body.should.be.not.empty;\n    done();\n});",
              "err": {},
              "uuid": "87ec0bf4-46dd-4cb8-b1d5-05c155302b55",
              "parentUUID": "77177781-e90b-41e2-b139-c1413b6fb7d7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87ec0bf4-46dd-4cb8-b1d5-05c155302b55"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 272,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "be36df2b-7221-4625-a509-f3a8090b4833",
          "title": "GET /spiele/:id",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Spiel zu vorhandener ID",
              "fullTitle": "GET /spiele/:id Spiel zu vorhandener ID",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}/${idGetVorhanden}`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    // response.body enthaelt ein JSON-Objekt mit Atom-Links\n    const selfLink = response.body._links.self.href;\n    // http://chaijs.com/plugins/chai-string\n    selfLink.should.endWith(idGetVorhanden);\n    done();\n});",
              "err": {},
              "uuid": "f8ed11f0-1dec-4959-8c64-2e971d0b6026",
              "parentUUID": "be36df2b-7221-4625-a509-f3a8090b4833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kein Spiel zu nicht-vorhandener ID",
              "fullTitle": "GET /spiele/:id Kein Spiel zu nicht-vorhandener ID",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}/${idNichtVorhanden}`)\n    .expect(shared_1.HttpStatus.NOT_FOUND)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "fa90fb1f-f6ed-4d03-bc3d-1e188f1c1fed",
              "parentUUID": "be36df2b-7221-4625-a509-f3a8090b4833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spiel zu vorhandener ID mit ETag",
              "fullTitle": "GET /spiele/:id Spiel zu vorhandener ID mit ETag",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}/${idGetVorhanden}`)\n    .set('If-None-Match', '\"0\"')\n    .expect(shared_1.HttpStatus.NOT_MODIFIED)\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    .end((error, _) => {\n    if (error) {\n        return done(error);\n    }\n    done();\n});",
              "err": {},
              "uuid": "200d22e5-650d-4ebd-aead-db581f6826b5",
              "parentUUID": "be36df2b-7221-4625-a509-f3a8090b4833",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f8ed11f0-1dec-4959-8c64-2e971d0b6026",
            "fa90fb1f-f6ed-4d03-bc3d-1e188f1c1fed",
            "200d22e5-650d-4ebd-aead-db581f6826b5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 65,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "be7c4971-fff7-420d-8b61-939ab80556db",
          "title": "GET /spiele?...",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Spiele mit einem Titel, der ein \"e\" enthaelt",
              "fullTitle": "GET /spiele?... Spiele mit einem Titel, der ein \"e\" enthaelt",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const teilTitel = 'e';\nrequest(server)\n    .get(`${path}?titel=${teilTitel}`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    body.should.be.not.empty;\n    // Jedes Buch hat einen Titel mit dem Teilstring 'a'\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    body.map((buch) => buch.titel).forEach((titel) => titel.should.contain(teilTitel));\n    done();\n});",
              "err": {},
              "uuid": "41e3fccc-8abc-4765-8211-9f6c7fa670dd",
              "parentUUID": "be7c4971-fff7-420d-8b61-939ab80556db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Keine Spiele mit einem Titel, der \"XX\" enthaelt",
              "fullTitle": "GET /spiele?... Keine Spiele mit einem Titel, der \"XX\" enthaelt",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}?titel=XX`)\n    .expect(shared_1.HttpStatus.NOT_FOUND)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "25b597af-9b01-4b11-bd0a-e4ccd2b1db86",
              "parentUUID": "be7c4971-fff7-420d-8b61-939ab80556db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mind. 1 Spiel mit dem Schlagwort \"SOLO\"",
              "fullTitle": "GET /spiele?... Mind. 1 Spiel mit dem Schlagwort \"SOLO\"",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const schlagwort = 'solo';\nrequest(server)\n    .get(`${path}?${schlagwort}=true`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    body.should.be.not.empty;\n    // Jedes Buch hat im Array der Schlagwoerter \"javascript\"\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    body.map((spiel) => spiel.schlagwoerter).forEach((s) => s.should.contain(`${schlagwort.toUpperCase()}`));\n    done();\n});",
              "err": {},
              "uuid": "f94ec1ab-33ba-4b05-a529-bd1f637c869b",
              "parentUUID": "be7c4971-fff7-420d-8b61-939ab80556db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Min 1 Spiel mit dem Schlagwort \"TEAM\"",
              "fullTitle": "GET /spiele?... Min 1 Spiel mit dem Schlagwort \"TEAM\"",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const schlagwort = 'team';\nrequest(server)\n    .get(`${path}?team=true`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.should.be.not.empty;\n    body.map((spiel) => spiel.schlagwoerter).forEach((s) => s.should.contain(`${schlagwort.toUpperCase()}`));\n    done();\n});",
              "err": {},
              "uuid": "8477e25c-e961-4e37-8600-e8ea159c11ba",
              "parentUUID": "be7c4971-fff7-420d-8b61-939ab80556db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "41e3fccc-8abc-4765-8211-9f6c7fa670dd",
            "25b597af-9b01-4b11-bd0a-e4ccd2b1db86",
            "f94ec1ab-33ba-4b05-a529-bd1f637c869b",
            "8477e25c-e961-4e37-8600-e8ea159c11ba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 88,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c6e92978-cad4-4ba6-b4af-d6ab8ff0979d",
          "title": "POST /spiele",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "POST /spiele \"before all\" hook",
              "timedOut": false,
              "duration": 500,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    // Promise\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    ({ token } = response.body);\n    token.should.be.not.empty;\n    // synchroner Before-Hook\n    done();\n});",
              "err": {},
              "uuid": "edf1f57f-649e-47e2-b630-813d7206f060",
              "parentUUID": "c6e92978-cad4-4ba6-b4af-d6ab8ff0979d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Neues Spiel",
              "fullTitle": "POST /spiele Neues Spiel",
              "timedOut": false,
              "duration": 23,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesSpiel)\n    .expect(shared_1.HttpStatus.CREATED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { location } = response.header;\n    location.should.be.not.empty;\n    // UUID: Muster von HEX-Ziffern\n    const indexLastSlash = location.lastIndexOf('/');\n    const idStr = location.substring(indexLastSlash + 1);\n    idStr.should.match(\n    /* eslint-disable-next-line max-len */\n    /[\\dA-Fa-f]{8}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{12}/u);\n    done();\n});",
              "err": {
                "message": "Error: expected 201 \"Created\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 201 \"Created\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "7d352b21-fc5f-4ca8-bc1d-d00dd50e69ae",
              "parentUUID": "c6e92978-cad4-4ba6-b4af-d6ab8ff0979d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel mit ungueltigen Daten",
              "fullTitle": "POST /spiele Neues Spiel mit ungueltigen Daten",
              "timedOut": false,
              "duration": 12,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesSpielInvalid)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.art.should.be.equal('Die Art eines Buches muss BRETT oder KARTEN sein.');\n    body.rating.should.endWith('ist keine gueltige Bewertung.');\n    body.verlag.should.be.equal('Der Verlag eines Buches muss RAVENSBURGER oder HSKA_VERLAG sein.');\n    done();\n});",
              "err": {
                "message": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "1b035ec5-95b5-4670-bad7-9010d35f209b",
              "parentUUID": "c6e92978-cad4-4ba6-b4af-d6ab8ff0979d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel, aber der Titel existiert bereits",
              "fullTitle": "POST /spiele Neues Spiel, aber der Titel existiert bereits",
              "timedOut": false,
              "duration": 50,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesSpielTitelExistiert)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.text.should.contain('Titel');\n    done();\n});",
              "err": {
                "message": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "fb159c78-6be7-4b4d-b6b8-6a81436f621f",
              "parentUUID": "c6e92978-cad4-4ba6-b4af-d6ab8ff0979d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel, aber ohne Token",
              "fullTitle": "POST /spiele Neues Spiel, aber ohne Token",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .send(neuesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "2e440885-0f26-475c-a424-f65f0d22fd61",
              "parentUUID": "c6e92978-cad4-4ba6-b4af-d6ab8ff0979d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel, aber mit falschem Token",
              "fullTitle": "POST /spiele Neues Spiel, aber mit falschem Token",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', 'Bearer x')\n    .send(neuesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "4c5933f3-416e-44ad-9ad7-395bdcc4ec14",
              "parentUUID": "c6e92978-cad4-4ba6-b4af-d6ab8ff0979d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e440885-0f26-475c-a424-f65f0d22fd61",
            "4c5933f3-416e-44ad-9ad7-395bdcc4ec14"
          ],
          "failures": [
            "7d352b21-fc5f-4ca8-bc1d-d00dd50e69ae",
            "1b035ec5-95b5-4670-bad7-9010d35f209b",
            "fb159c78-6be7-4b4d-b6b8-6a81436f621f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 129,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "21eed1b8-310b-4cdb-86b0-3bd49d19a93c",
          "title": "PUT /spiele/:id",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "PUT /spiele/:id \"before all\" hook",
              "timedOut": false,
              "duration": 500,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    ({ token } = response.body);\n    token.should.be.not.empty;\n    done();\n});",
              "err": {},
              "uuid": "694e89d2-80eb-46de-8f25-e509c9391476",
              "parentUUID": "21eed1b8-310b-4cdb-86b0-3bd49d19a93c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Vorhandenes Spiel aendern",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpiel)\n    .expect(shared_1.HttpStatus.NO_CONTENT)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {
                "message": "Error: expected 204 \"No Content\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 204 \"No Content\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "aaf7b1ff-6676-47c3-b230-e2ba72e18854",
              "parentUUID": "21eed1b8-310b-4cdb-86b0-3bd49d19a93c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Nicht-vorhandenes Spiel aendern",
              "fullTitle": "PUT /spiele/:id Nicht-vorhandenes Spiel aendern",
              "timedOut": false,
              "duration": 19,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutNichtVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpielIdNichtVorhanden)\n    .expect(shared_1.HttpStatus.PRECONDITION_FAILED)\n    .end(error => {\n    if (error) {\n        return done(error);\n    }\n    done();\n});",
              "err": {
                "message": "Error: expected 412 \"Precondition Failed\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 412 \"Precondition Failed\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "e9ebd75f-3d13-4b1d-adfd-dfe21df9d6f9",
              "parentUUID": "21eed1b8-310b-4cdb-86b0-3bd49d19a93c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Vorhandenes Spiel aendern, aber mit ungueltigen Daten",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern, aber mit ungueltigen Daten",
              "timedOut": false,
              "duration": 16,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpielInvalid)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.art.should.be.equal('Die Art eines Spieles muss BRETT oder KARTEN sein.');\n    body.rating.should.endWith('ist keine gueltige Bewertung.');\n    body.verlag.should.be.equal('Der Verlag eines Buches muss RAVENSBURGER oder SCHMIDT sein.');\n    done();\n});",
              "err": {
                "message": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "0c02b4c7-5123-416d-9949-f564927240bd",
              "parentUUID": "21eed1b8-310b-4cdb-86b0-3bd49d19a93c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Vorhandenes Spiel aendern, aber ohne Token",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern, aber ohne Token",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "2a317a78-fa07-4e2c-afcd-986757e6dffb",
              "parentUUID": "21eed1b8-310b-4cdb-86b0-3bd49d19a93c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Vorhandenes Spiel aendern, aber mit falschem Token",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern, aber mit falschem Token",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', 'Bearer x')\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "fb56203c-9257-4855-9162-5391e6f2293d",
              "parentUUID": "21eed1b8-310b-4cdb-86b0-3bd49d19a93c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2a317a78-fa07-4e2c-afcd-986757e6dffb",
            "fb56203c-9257-4855-9162-5391e6f2293d"
          ],
          "failures": [
            "aaf7b1ff-6676-47c3-b230-e2ba72e18854",
            "e9ebd75f-3d13-4b1d-adfd-dfe21df9d6f9",
            "0c02b4c7-5123-416d-9949-f564927240bd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 86,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c3ed0e0e-a6c5-4da9-9e44-be2c36b25e13",
          "title": "DELETE /spiele",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "DELETE /spiele \"before all\" hook",
              "timedOut": false,
              "duration": 476,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    ({ token } = response.body);\n    token.should.be.not.empty;\n    done();\n});",
              "err": {},
              "uuid": "a9bb0587-6344-4c17-86cd-4068c3f299f4",
              "parentUUID": "c3ed0e0e-a6c5-4da9-9e44-be2c36b25e13",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Vorhandenes Spiel loeschen",
              "fullTitle": "DELETE /spiele Vorhandenes Spiel loeschen",
              "timedOut": false,
              "duration": 9,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .expect(shared_1.HttpStatus.NO_CONTENT)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {
                "message": "Error: expected 204 \"No Content\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 204 \"No Content\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "317420e8-ed41-41c2-b3e4-3875aa8c760d",
              "parentUUID": "c3ed0e0e-a6c5-4da9-9e44-be2c36b25e13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spiel loeschen, aber ohne Token",
              "fullTitle": "DELETE /spiele Spiel loeschen, aber ohne Token",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "d0aafff3-d7f5-4656-a57a-88db22f59aa8",
              "parentUUID": "c3ed0e0e-a6c5-4da9-9e44-be2c36b25e13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spiel loeschen, aber mit falschem Token",
              "fullTitle": "DELETE /spiele Spiel loeschen, aber mit falschem Token",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .set('Authorization', 'Bearer x')\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "228cab7f-7af3-45a0-a19a-89dda826a382",
              "parentUUID": "c3ed0e0e-a6c5-4da9-9e44-be2c36b25e13",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d0aafff3-d7f5-4656-a57a-88db22f59aa8",
            "228cab7f-7af3-45a0-a19a-89dda826a382"
          ],
          "failures": [
            "317420e8-ed41-41c2-b3e4-3875aa8c760d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.0.1"
    }
  }
}