{
  "stats": {
    "suites": 6,
    "tests": 21,
    "passes": 12,
    "pending": 0,
    "failures": 9,
    "start": "2019-11-03T10:50:15.132Z",
    "end": "2019-11-03T10:50:22.697Z",
    "duration": 7565,
    "testsRegistered": 21,
    "passPercent": 57.14285714285714,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b2d3f1bb-dcc4-4974-8541-d97cc054a1d6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 1317,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await shared_1.connectDB();\nserver = app_1.app.listen(0, host, () => {\n    shared_1.logger.info(`Node ${process.version}`);\n    const address = server.address();\n    if (address !== null && typeof address !== 'string') {\n        shared_1.logger.info(`Testserver lÃ¤uft: http://${host}:${address.port}`);\n    }\n    server.emit('testServerStarted');\n});",
          "err": {},
          "uuid": "347f8547-7397-4ce1-bc22-dbdc55005c40",
          "parentUUID": "b2d3f1bb-dcc4-4974-8541-d97cc054a1d6",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "adac2ffb-0d8d-4399-ba2f-142a77c65797",
          "title": "GET /spiele",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Alle Spiele",
              "fullTitle": "GET /spiele Alle Spiele",
              "timedOut": false,
              "duration": 178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(path)\n    // Assertion = Expectation\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    // Promise\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    response.body.should.be.not.empty;\n    done();\n});",
              "err": {},
              "uuid": "39c26fe8-c4ad-4cb9-aa66-f952326b1099",
              "parentUUID": "adac2ffb-0d8d-4399-ba2f-142a77c65797",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "39c26fe8-c4ad-4cb9-aa66-f952326b1099"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 178,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "244011ce-2690-4405-85f7-6685dc4f7d54",
          "title": "GET /spiele/:id",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Spiel zu vorhandener ID",
              "fullTitle": "GET /spiele/:id Spiel zu vorhandener ID",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}/${idGetVorhanden}`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    // response.body enthaelt ein JSON-Objekt mit Atom-Links\n    const selfLink = response.body._links.self.href;\n    // http://chaijs.com/plugins/chai-string\n    selfLink.should.endWith(idGetVorhanden);\n    done();\n});",
              "err": {},
              "uuid": "d133cb58-c281-4176-a538-3bf47719cdb1",
              "parentUUID": "244011ce-2690-4405-85f7-6685dc4f7d54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Kein Spiel zu nicht-vorhandener ID",
              "fullTitle": "GET /spiele/:id Kein Spiel zu nicht-vorhandener ID",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}/${idNichtVorhanden}`)\n    .expect(shared_1.HttpStatus.NOT_FOUND)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "ea1037db-6ed3-4454-9619-015ff779a3dc",
              "parentUUID": "244011ce-2690-4405-85f7-6685dc4f7d54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spiel zu vorhandener ID mit ETag",
              "fullTitle": "GET /spiele/:id Spiel zu vorhandener ID mit ETag",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}/${idGetVorhanden}`)\n    .set('If-None-Match', '\"0\"')\n    .expect(shared_1.HttpStatus.NOT_MODIFIED)\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    .end((error, _) => {\n    if (error) {\n        return done(error);\n    }\n    done();\n});",
              "err": {},
              "uuid": "4fd36b4d-9494-43a9-864a-c768bfc6c916",
              "parentUUID": "244011ce-2690-4405-85f7-6685dc4f7d54",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d133cb58-c281-4176-a538-3bf47719cdb1",
            "ea1037db-6ed3-4454-9619-015ff779a3dc",
            "4fd36b4d-9494-43a9-864a-c768bfc6c916"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 71,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "833adf9e-952e-4d91-b611-4683c80b1b7d",
          "title": "GET /spiele?...",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Spiele mit einem Titel, der ein \"e\" enthaelt",
              "fullTitle": "GET /spiele?... Spiele mit einem Titel, der ein \"e\" enthaelt",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const teilTitel = 'e';\nrequest(server)\n    .get(`${path}?titel=${teilTitel}`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    body.should.be.not.empty;\n    // Jedes Buch hat einen Titel mit dem Teilstring 'a'\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    body.map((buch) => buch.titel).forEach((titel) => titel.should.contain(teilTitel));\n    done();\n});",
              "err": {},
              "uuid": "cf8758a7-6968-436a-957b-e2b87901acf5",
              "parentUUID": "833adf9e-952e-4d91-b611-4683c80b1b7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Keine Spiele mit einem Titel, der \"XX\" enthaelt",
              "fullTitle": "GET /spiele?... Keine Spiele mit einem Titel, der \"XX\" enthaelt",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .get(`${path}?titel=XX`)\n    .expect(shared_1.HttpStatus.NOT_FOUND)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "13e6f7af-29a2-443b-8d7d-e4885f45164c",
              "parentUUID": "833adf9e-952e-4d91-b611-4683c80b1b7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mind. 1 Spiel mit dem Schlagwort \"SOLO\"",
              "fullTitle": "GET /spiele?... Mind. 1 Spiel mit dem Schlagwort \"SOLO\"",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const schlagwort = 'solo';\nrequest(server)\n    .get(`${path}?${schlagwort}=true`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    // response.body ist ein JSON-Array mit mind. 1 JSON-Objekt\n    body.should.be.not.empty;\n    // Jedes Buch hat im Array der Schlagwoerter \"javascript\"\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    body.map((spiel) => spiel.schlagwoerter).forEach((s) => s.should.contain(`${schlagwort.toUpperCase()}`));\n    done();\n});",
              "err": {},
              "uuid": "87574a40-54e7-4e88-9ffd-9473f6279af3",
              "parentUUID": "833adf9e-952e-4d91-b611-4683c80b1b7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Min 1 Spiel mit dem Schlagwort \"TEAM\"",
              "fullTitle": "GET /spiele?... Min 1 Spiel mit dem Schlagwort \"TEAM\"",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const schlagwort = 'team';\nrequest(server)\n    .get(`${path}?team=true`)\n    .expect(shared_1.HttpStatus.OK)\n    .expect('Content-Type', /json/u)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.should.be.not.empty;\n    body.map((spiel) => spiel.schlagwoerter).forEach((s) => s.should.contain(`${schlagwort.toUpperCase()}`));\n    done();\n});",
              "err": {},
              "uuid": "f81679d3-f6ad-4d55-a1e3-f141d52613c3",
              "parentUUID": "833adf9e-952e-4d91-b611-4683c80b1b7d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf8758a7-6968-436a-957b-e2b87901acf5",
            "13e6f7af-29a2-443b-8d7d-e4885f45164c",
            "87574a40-54e7-4e88-9ffd-9473f6279af3",
            "f81679d3-f6ad-4d55-a1e3-f141d52613c3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 87,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "851b1414-b2b4-4a42-88c6-dee102bf7e45",
          "title": "POST /spiele",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "POST /spiele \"before all\" hook",
              "timedOut": false,
              "duration": 530,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    // Promise\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    ({ token } = response.body);\n    token.should.be.not.empty;\n    // synchroner Before-Hook\n    done();\n});",
              "err": {},
              "uuid": "5b8ef04e-d801-4528-a1b4-03f723e7e58d",
              "parentUUID": "851b1414-b2b4-4a42-88c6-dee102bf7e45",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Neues Spiel",
              "fullTitle": "POST /spiele Neues Spiel",
              "timedOut": false,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesSpiel)\n    .expect(shared_1.HttpStatus.CREATED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { location } = response.header;\n    location.should.be.not.empty;\n    // UUID: Muster von HEX-Ziffern\n    const indexLastSlash = location.lastIndexOf('/');\n    const idStr = location.substring(indexLastSlash + 1);\n    idStr.should.match(\n    /* eslint-disable-next-line max-len */\n    /[\\dA-Fa-f]{8}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{4}-[\\dA-Fa-f]{12}/u);\n    done();\n});",
              "err": {
                "message": "Error: expected 201 \"Created\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 201 \"Created\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "40d6726e-877b-4ef3-a505-fa1df6aaa923",
              "parentUUID": "851b1414-b2b4-4a42-88c6-dee102bf7e45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel mit ungueltigen Daten",
              "fullTitle": "POST /spiele Neues Spiel mit ungueltigen Daten",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesSpielInvalid)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.art.should.be.equal('Die Art eines Buches muss BRETT oder KARTEN sein.');\n    body.rating.should.endWith('ist keine gueltige Bewertung.');\n    body.verlag.should.be.equal('Der Verlag eines Buches muss RAVENSBURGER oder HSKA_VERLAG sein.');\n    done();\n});",
              "err": {
                "message": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "60700adc-0bd8-421e-a0f1-974d7fd1383d",
              "parentUUID": "851b1414-b2b4-4a42-88c6-dee102bf7e45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel, aber der Titel existiert bereits",
              "fullTitle": "POST /spiele Neues Spiel, aber der Titel existiert bereits",
              "timedOut": false,
              "duration": 23,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', `Bearer ${token}`)\n    .send(neuesSpielTitelExistiert)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.text.should.contain('Titel');\n    done();\n});",
              "err": {
                "message": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "a90f3190-521d-491f-bcef-70851a36aa76",
              "parentUUID": "851b1414-b2b4-4a42-88c6-dee102bf7e45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel, aber ohne Token",
              "fullTitle": "POST /spiele Neues Spiel, aber ohne Token",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .send(neuesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "59785f75-59d7-4c42-9612-d045aa4bbbd9",
              "parentUUID": "851b1414-b2b4-4a42-88c6-dee102bf7e45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Neues Spiel, aber mit falschem Token",
              "fullTitle": "POST /spiele Neues Spiel, aber mit falschem Token",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(path)\n    .set('Authorization', 'Bearer x')\n    .send(neuesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "e79a80f9-f5b8-427a-935e-33e280e6d67e",
              "parentUUID": "851b1414-b2b4-4a42-88c6-dee102bf7e45",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59785f75-59d7-4c42-9612-d045aa4bbbd9",
            "e79a80f9-f5b8-427a-935e-33e280e6d67e"
          ],
          "failures": [
            "40d6726e-877b-4ef3-a505-fa1df6aaa923",
            "60700adc-0bd8-421e-a0f1-974d7fd1383d",
            "a90f3190-521d-491f-bcef-70851a36aa76"
          ],
          "pending": [],
          "skipped": [],
          "duration": 87,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "47244ecb-2d7e-499c-947f-5235dac8a457",
          "title": "PUT /spiele/:id",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "PUT /spiele/:id \"before all\" hook",
              "timedOut": false,
              "duration": 379,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    ({ token } = response.body);\n    token.should.be.not.empty;\n    done();\n});",
              "err": {},
              "uuid": "19476d6d-cdb9-4ed9-a50a-501f85d4fbef",
              "parentUUID": "47244ecb-2d7e-499c-947f-5235dac8a457",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Vorhandenes Spiel aendern",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern",
              "timedOut": false,
              "duration": 801,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpiel)\n    .expect(shared_1.HttpStatus.NO_CONTENT)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {
                "message": "Error: expected 204 \"No Content\", got 500 \"Internal Server Error\"",
                "estack": "Error: expected 204 \"No Content\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at Stream.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at Stream.emit (events.js:210:5)\n    at Unzip.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\unzip.js:55:12)\n    at Unzip.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "cc812126-ad7d-46cd-abd7-2591b14a33e8",
              "parentUUID": "47244ecb-2d7e-499c-947f-5235dac8a457",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Nicht-vorhandenes Spiel aendern",
              "fullTitle": "PUT /spiele/:id Nicht-vorhandenes Spiel aendern",
              "timedOut": false,
              "duration": 769,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutNichtVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpielIdNichtVorhanden)\n    .expect(shared_1.HttpStatus.PRECONDITION_FAILED)\n    .end(error => {\n    if (error) {\n        return done(error);\n    }\n    done();\n});",
              "err": {
                "message": "Error: expected 412 \"Precondition Failed\", got 500 \"Internal Server Error\"",
                "estack": "Error: expected 412 \"Precondition Failed\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at Stream.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at Stream.emit (events.js:210:5)\n    at Unzip.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\unzip.js:55:12)\n    at Unzip.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "e78f189a-c547-4068-8e89-acca3ff0c321",
              "parentUUID": "47244ecb-2d7e-499c-947f-5235dac8a457",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Vorhandenes Spiel aendern, aber mit ungueltigen Daten",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern, aber mit ungueltigen Daten",
              "timedOut": false,
              "duration": 871,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpielInvalid)\n    .expect(shared_1.HttpStatus.BAD_REQUEST)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    const { body } = response;\n    body.art.should.be.equal('Die Art eines Spieles muss BRETT oder KARTEN sein.');\n    body.rating.should.endWith('ist keine gueltige Bewertung.');\n    body.verlag.should.be.equal('Der Verlag eines Buches muss RAVENSBURGER oder SCHMIDT sein.');\n    done();\n});",
              "err": {
                "message": "Error: expected 400 \"Bad Request\", got 500 \"Internal Server Error\"",
                "estack": "Error: expected 400 \"Bad Request\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at Stream.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at Stream.emit (events.js:210:5)\n    at Unzip.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\unzip.js:55:12)\n    at Unzip.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "da531e66-2756-40c8-a82a-c509caf8a8ef",
              "parentUUID": "47244ecb-2d7e-499c-947f-5235dac8a457",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Vorhandenes Spiel aendern, aber ohne Token",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern, aber ohne Token",
              "timedOut": false,
              "duration": 932,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {
                "message": "Error: expected 401 \"Unauthorized\", got 500 \"Internal Server Error\"",
                "estack": "Error: expected 401 \"Unauthorized\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at Stream.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at Stream.emit (events.js:210:5)\n    at Unzip.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\unzip.js:55:12)\n    at Unzip.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "7b1b6c4d-4787-4aca-8234-44ab152a72b7",
              "parentUUID": "47244ecb-2d7e-499c-947f-5235dac8a457",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Vorhandenes Spiel aendern, aber mit falschem Token",
              "fullTitle": "PUT /spiele/:id Vorhandenes Spiel aendern, aber mit falschem Token",
              "timedOut": false,
              "duration": 978,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .put(`${path}/${idPutVorhanden}`)\n    .set('Authorization', 'Bearer x')\n    .set('If-Match', '\"0\"')\n    .send(geaendertesSpiel)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {
                "message": "Error: expected 401 \"Unauthorized\", got 500 \"Internal Server Error\"",
                "estack": "Error: expected 401 \"Unauthorized\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at Stream.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at Stream.emit (events.js:210:5)\n    at Unzip.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\unzip.js:55:12)\n    at Unzip.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "45789818-601e-4f10-b0d5-abcd3c11eb70",
              "parentUUID": "47244ecb-2d7e-499c-947f-5235dac8a457",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cc812126-ad7d-46cd-abd7-2591b14a33e8",
            "e78f189a-c547-4068-8e89-acca3ff0c321",
            "da531e66-2756-40c8-a82a-c509caf8a8ef",
            "7b1b6c4d-4787-4aca-8234-44ab152a72b7",
            "45789818-601e-4f10-b0d5-abcd3c11eb70"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4351,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c2e8c95b-065f-491c-a56a-93d969e8c4d9",
          "title": "DELETE /spiele",
          "fullFile": "C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\dist\\test\\spiel\\rest\\index.spec.js",
          "file": "\\dist\\test\\spiel\\rest\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "DELETE /spiele \"before all\" hook",
              "timedOut": false,
              "duration": 379,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .post(`${loginPath}`)\n    .set('Content-type', 'application/x-www-form-urlencoded')\n    .send(loginDaten)\n    .expect(shared_1.HttpStatus.OK)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    ({ token } = response.body);\n    token.should.be.not.empty;\n    done();\n});",
              "err": {},
              "uuid": "48bfc797-047b-4b53-8ad9-4cccd37a5917",
              "parentUUID": "c2e8c95b-065f-491c-a56a-93d969e8c4d9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Vorhandenes Spiel loeschen",
              "fullTitle": "DELETE /spiele Vorhandenes Spiel loeschen",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .set('Authorization', `Bearer ${token}`)\n    .expect(shared_1.HttpStatus.NO_CONTENT)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {
                "message": "Error: expected 204 \"No Content\", got 401 \"Unauthorized\"",
                "estack": "Error: expected 204 \"No Content\", got 401 \"Unauthorized\"\n    at Test._assertStatus (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.<anonymous> (C:\\Users\\admin\\Documents\\SWE\\mean-spiele\\node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at IncomingMessage.emit (events.js:215:7)\n    at endReadableNT (_stream_readable.js:1193:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": null
              },
              "uuid": "f050dc6e-a7c0-47d9-b557-e17a846c096a",
              "parentUUID": "c2e8c95b-065f-491c-a56a-93d969e8c4d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spiel loeschen, aber ohne Token",
              "fullTitle": "DELETE /spiele Spiel loeschen, aber ohne Token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "1a75b112-8363-403c-a99c-2cd2aaca42c7",
              "parentUUID": "c2e8c95b-065f-491c-a56a-93d969e8c4d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spiel loeschen, aber mit falschem Token",
              "fullTitle": "DELETE /spiele Spiel loeschen, aber mit falschem Token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(server)\n    .delete(`${path}/${idDeleteVorhanden}`)\n    .set('Authorization', 'Bearer x')\n    .expect(shared_1.HttpStatus.UNAUTHORIZED)\n    .end((error, response) => {\n    if (error) {\n        return done(error);\n    }\n    response.body.should.be.empty;\n    done();\n});",
              "err": {},
              "uuid": "e27787cb-aa35-410d-af35-24aaeb33acba",
              "parentUUID": "c2e8c95b-065f-491c-a56a-93d969e8c4d9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1a75b112-8363-403c-a99c-2cd2aaca42c7",
            "e27787cb-aa35-410d-af35-24aaeb33acba"
          ],
          "failures": [
            "f050dc6e-a7c0-47d9-b557-e17a846c096a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.0.1"
    }
  }
}