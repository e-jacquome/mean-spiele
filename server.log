debug: Logging durch Winston ist konfiguriert: Level Info {"timestamp":"2019-11-03T10:50:13.686Z"}
debug: Upload-Verzeichnis: C:\Users\admin\Documents\SWE\mean-spiele\dist\temp\upload {"timestamp":"2019-11-03T10:50:13.688Z"}
debug: Download-Verzeichnis: C:\Users\admin\Documents\SWE\mean-spiele\dist\temp\download {"timestamp":"2019-11-03T10:50:13.688Z"}
error: [{"keyword":"format","dataPath":"[4].email","schemaPath":"#/items/properties/email/format","params":{"format":"email"},"message":"should match format \"email\"","schema":"email","parentSchema":{"type":"string","format":"email"},"data":"hjördis.goettsche@jbgb.de"}] {"timestamp":"2019-11-03T10:50:14.665Z"}
info: UsersService: Die Benutzerkennungen sind eingelesen: [{"_id":"20000000-0000-0000-0000-000000000001","username":"admin","password":"$2b$12$jC0vLwqFtvikW9hrKL4RZ.ZMeaW5r/jYrNkm.ub23bMWL/mE2O20O","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},{"_id":"20000000-0000-0000-0000-000000000002","username":"eric.jacquome","password":"$2b$12$jC0vLwqFtvikW9hrKL4RZ.ZMeaW5r/jYrNkm.ub23bMWL/mE2O20O","email":"eric.jacquome@jbgb.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},{"_id":"20000000-0000-0000-0000-000000000003","username":"bene.bender","password":"$2b$12$jC0vLwqFtvikW9hrKL4RZ.ZMeaW5r/jYrNkm.ub23bMWL/mE2O20O","email":"bene.bender@jbgb.de","roles":["mitarbeiter"]},{"_id":"20000000-0000-0000-0000-000000000004","username":"raphael.brand","password":"$2b$12$jC0vLwqFtvikW9hrKL4RZ.ZMeaW5r/jYrNkm.ub23bMWL/mE2O20O","email":"raphael.brand@jbgb.de","roles":["kunde"]},{"_id":"20000000-0000-0000-0000-000000000005","username":"hjördis.goettsche","password":"$2b$12$jC0vLwqFtvikW9hrKL4RZ.ZMeaW5r/jYrNkm.ub23bMWL/mE2O20O","email":"hjördis.goettsche@jbgb.de","roles":["kunde"]},{"_id":"20000000-0000-0000-0000-000000000006","username":"karl.kunde","password":"$2b$12$jC0vLwqFtvikW9hrKL4RZ.ZMeaW5r/jYrNkm.ub23bMWL/mE2O20O","email":"karls.kunde@jbgb.de","roles":["kunde"]},{"_id":"20000000-0000-0000-0000-000000000007","username":"nils.nichtkunde","password":"$2b$12$jC0vLwqFtvikW9hrKL4RZ.ZMeaW5r/jYrNkm.ub23bMWL/mE2O20O","email":"nils.nichtkunde@jbgb.de"}] {"timestamp":"2019-11-03T10:50:14.675Z"}
error: [{"keyword":"format","dataPath":"[4].email","schemaPath":"#/items/properties/email/format","params":{"format":"email"},"message":"should match format \"email\"","schema":"email","parentSchema":{"type":"string","format":"email"},"data":"hjördis.goettsche@jbgb.de"}] {"timestamp":"2019-11-03T10:50:14.787Z"}
info: UsersService: Die Benutzerkennungen sind eingelesen: [{"_id":"20000000-0000-0000-0000-000000000001","username":"admin","password":"$2b$12$jC0vLwqFtvikW9hrKL4RZ.ZMeaW5r/jYrNkm.ub23bMWL/mE2O20O","email":"admin@hska.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},{"_id":"20000000-0000-0000-0000-000000000002","username":"eric.jacquome","password":"$2b$12$jC0vLwqFtvikW9hrKL4RZ.ZMeaW5r/jYrNkm.ub23bMWL/mE2O20O","email":"eric.jacquome@jbgb.de","roles":["admin","mitarbeiter","abteilungsleiter","kunde"]},{"_id":"20000000-0000-0000-0000-000000000003","username":"bene.bender","password":"$2b$12$jC0vLwqFtvikW9hrKL4RZ.ZMeaW5r/jYrNkm.ub23bMWL/mE2O20O","email":"bene.bender@jbgb.de","roles":["mitarbeiter"]},{"_id":"20000000-0000-0000-0000-000000000004","username":"raphael.brand","password":"$2b$12$jC0vLwqFtvikW9hrKL4RZ.ZMeaW5r/jYrNkm.ub23bMWL/mE2O20O","email":"raphael.brand@jbgb.de","roles":["kunde"]},{"_id":"20000000-0000-0000-0000-000000000005","username":"hjördis.goettsche","password":"$2b$12$jC0vLwqFtvikW9hrKL4RZ.ZMeaW5r/jYrNkm.ub23bMWL/mE2O20O","email":"hjördis.goettsche@jbgb.de","roles":["kunde"]},{"_id":"20000000-0000-0000-0000-000000000006","username":"karl.kunde","password":"$2b$12$jC0vLwqFtvikW9hrKL4RZ.ZMeaW5r/jYrNkm.ub23bMWL/mE2O20O","email":"karls.kunde@jbgb.de","roles":["kunde"]},{"_id":"20000000-0000-0000-0000-000000000007","username":"nils.nichtkunde","password":"$2b$12$jC0vLwqFtvikW9hrKL4RZ.ZMeaW5r/jYrNkm.ub23bMWL/mE2O20O","email":"nils.nichtkunde@jbgb.de"}] {"timestamp":"2019-11-03T10:50:14.819Z"}
info: DB-Verbindung konnte aufgebaut werden. DB-Name: hska {"timestamp":"2019-11-03T10:50:16.498Z"}
info: Node v13.0.0-rc.1 {"timestamp":"2019-11-03T10:50:16.510Z"}
info: Testserver läuft: http://localhost:55958 {"timestamp":"2019-11-03T10:50:16.512Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:16.532Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:16.532Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:16.533Z"}
debug: SpielRequestHandler.find(): queryParams={} {"timestamp":"2019-11-03T10:50:16.553Z"}
debug: SpielService.find(): query= [object Object] {"timestamp":"2019-11-03T10:50:16.554Z"}
debug: SpielRequestHandler.find(): spiele=[{"schlagwoerter":["SOLO"],"autoren":[{"nachname":"Auto","vorname":"Adriana"},{"nachname":"Auto","vorname":"Alfred"}],"_id":"00000000-0000-0000-0000-000000000001","titel":"Autoscooter","rating":4,"art":"BRETT","verlag":"RAVENSBURGER","preis":34.99,"rabatt":0.011,"lieferbar":true,"datum":"2019-02-01T00:00:00.000Z","homepage":"https://hska.at/","__v":0,"createdAt":"2019-02-01T00:00:00.000Z","updatedAt":"2019-02-01T00:00:00.000Z"},{"schlagwoerter":["TEAM"],"autoren":[{"nachname":"Bibel","vorname":"Bernd"}],"_id":"00000000-0000-0000-0000-000000000002","titel":"Bibelquiz","rating":2,"art":"KARTEN","verlag":"RAVENSBURGER","preis":12.99,"rabatt":0.022,"lieferbar":true,"datum":"2019-02-02T00:00:00.000Z","homepage":"https://bibel.quiz/","__v":0,"createdAt":"2019-02-01T00:00:00.000Z","updatedAt":"2019-02-01T00:00:00.000Z"},{"schlagwoerter":["TEAM"],"autoren":[{"nachname":"Domino","vorname":"Dieter"}],"_id":"00000000-0000-0000-0000-000000000004","titel":"Domino","rating":3,"art":"BRETT","verlag":"RAVENSBURGER","preis":18,"rabatt":0.044,"lieferbar":true,"datum":"2019-02-04T00:00:00.000Z","homepage":"https://domino.day/","__v":0,"createdAt":"2019-02-01T00:00:00.000Z","updatedAt":"2019-02-01T00:00:00.000Z"},{"schlagwoerter":["SOLO"],"autoren":[{"nachname":"Elfe","vorname":"Elfriede"}],"_id":"00000000-0000-0000-0000-000000000005","titel":"Elfenland","rating":2,"art":"BRETT","verlag":"SCHMIDT","preis":99.99,"rabatt":0.055,"lieferbar":true,"datum":"2019-02-05T00:00:00.000Z","homepage":"https://elfen.land/","__v":0,"createdAt":"2019-02-01T00:00:00.000Z","updatedAt":"2019-02-01T00:00:00.000Z"},{"schlagwoerter":["SOLO"],"autoren":[{"nachname":"Gras","vorname":"Gerda"}],"_id":"00000000-0000-0000-0000-000000000003","titel":"Grashuepfer","rating":1,"art":"KARTEN","verlag":"RAVENSBURGER","preis":4.2,"rabatt":0.033,"lieferbar":true,"datum":"2019-02-03T00:00:00.000Z","homepage":"https://gras.com/","__v":0,"createdAt":"2019-02-01T00:00:00.000Z","updatedAt":"2019-02-01T00:00:00.000Z"}] {"timestamp":"2019-11-03T10:50:16.659Z"}
debug: SpielRequestHandler.find(): payload=[object Object],[object Object],[object Object],[object Object],[object Object] {"timestamp":"2019-11-03T10:50:16.661Z"}
debug: Response time: 137.586299 ms {"timestamp":"2019-11-03T10:50:16.669Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:16.703Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:16.703Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:16.703Z"}
debug: SharedRequestHandler.validateUUID(): isUUID {"timestamp":"2019-11-03T10:50:16.710Z"}
debug: SpielRequestHandler.findById(): versionHeader= undefined {"timestamp":"2019-11-03T10:50:16.711Z"}
debug: spielRequestHandler.findById(): id=00000000-0000-0000-0000-000000000001 {"timestamp":"2019-11-03T10:50:16.711Z"}
debug: SpielService.findById(): id= 00000000-0000-0000-0000-000000000001 {"timestamp":"2019-11-03T10:50:16.711Z"}
debug: SpielRequestHandler.findById(): spiel={"schlagwoerter":["SOLO"],"autoren":[{"nachname":"Auto","vorname":"Adriana"},{"nachname":"Auto","vorname":"Alfred"}],"_id":"00000000-0000-0000-0000-000000000001","titel":"Autoscooter","rating":4,"art":"BRETT","verlag":"RAVENSBURGER","preis":34.99,"rabatt":0.011,"lieferbar":true,"datum":"2019-02-01T00:00:00.000Z","homepage":"https://hska.at/","__v":0,"createdAt":"2019-02-01T00:00:00.000Z","updatedAt":"2019-02-01T00:00:00.000Z"} {"timestamp":"2019-11-03T10:50:16.719Z"}
debug: SpielRequestHandler.findById(): VerisionDb=0 {"timestamp":"2019-11-03T10:50:16.719Z"}
debug: Response time: 16.921699999999998 ms {"timestamp":"2019-11-03T10:50:16.720Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:16.731Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:16.731Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:16.731Z"}
debug: SharedRequestHandler.validateUUID(): isUUID {"timestamp":"2019-11-03T10:50:16.735Z"}
debug: SpielRequestHandler.findById(): versionHeader= undefined {"timestamp":"2019-11-03T10:50:16.735Z"}
debug: spielRequestHandler.findById(): id=00000000-0000-0000-0000-000000000999 {"timestamp":"2019-11-03T10:50:16.735Z"}
debug: SpielService.findById(): id= 00000000-0000-0000-0000-000000000999 {"timestamp":"2019-11-03T10:50:16.735Z"}
debug: SpielRequestHandler.findById(): status=NOT_FOUND {"timestamp":"2019-11-03T10:50:16.737Z"}
debug: Response time: 7.131499 ms {"timestamp":"2019-11-03T10:50:16.738Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "if-none-match": "\"0\"",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:16.750Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:16.751Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:16.751Z"}
debug: SharedRequestHandler.validateUUID(): isUUID {"timestamp":"2019-11-03T10:50:16.761Z"}
debug: SpielRequestHandler.findById(): versionHeader= "0" {"timestamp":"2019-11-03T10:50:16.762Z"}
debug: spielRequestHandler.findById(): id=00000000-0000-0000-0000-000000000001 {"timestamp":"2019-11-03T10:50:16.762Z"}
debug: SpielService.findById(): id= 00000000-0000-0000-0000-000000000001 {"timestamp":"2019-11-03T10:50:16.762Z"}
debug: SpielRequestHandler.findById(): spiel={"schlagwoerter":["SOLO"],"autoren":[{"nachname":"Auto","vorname":"Adriana"},{"nachname":"Auto","vorname":"Alfred"}],"_id":"00000000-0000-0000-0000-000000000001","titel":"Autoscooter","rating":4,"art":"BRETT","verlag":"RAVENSBURGER","preis":34.99,"rabatt":0.011,"lieferbar":true,"datum":"2019-02-01T00:00:00.000Z","homepage":"https://hska.at/","__v":0,"createdAt":"2019-02-01T00:00:00.000Z","updatedAt":"2019-02-01T00:00:00.000Z"} {"timestamp":"2019-11-03T10:50:16.769Z"}
debug: SpielRequestHandler.findById(): VerisionDb=0 {"timestamp":"2019-11-03T10:50:16.769Z"}
debug: Response time: 20.1036 ms {"timestamp":"2019-11-03T10:50:16.770Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:16.785Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:16.785Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:16.785Z"}
debug: SpielRequestHandler.find(): queryParams={"titel":"e"} {"timestamp":"2019-11-03T10:50:16.787Z"}
debug: SpielService.find(): query= [object Object] {"timestamp":"2019-11-03T10:50:16.787Z"}
debug: SpielService.find(): dbQuery=[object Object] {"timestamp":"2019-11-03T10:50:16.787Z"}
debug: SpielRequestHandler.find(): spiele=[{"schlagwoerter":["SOLO"],"autoren":[{"nachname":"Auto","vorname":"Adriana"},{"nachname":"Auto","vorname":"Alfred"}],"_id":"00000000-0000-0000-0000-000000000001","titel":"Autoscooter","rating":4,"art":"BRETT","verlag":"RAVENSBURGER","preis":34.99,"rabatt":0.011,"lieferbar":true,"datum":"2019-02-01T00:00:00.000Z","homepage":"https://hska.at/","__v":0,"createdAt":"2019-02-01T00:00:00.000Z","updatedAt":"2019-02-01T00:00:00.000Z"},{"schlagwoerter":["TEAM"],"autoren":[{"nachname":"Bibel","vorname":"Bernd"}],"_id":"00000000-0000-0000-0000-000000000002","titel":"Bibelquiz","rating":2,"art":"KARTEN","verlag":"RAVENSBURGER","preis":12.99,"rabatt":0.022,"lieferbar":true,"datum":"2019-02-02T00:00:00.000Z","homepage":"https://bibel.quiz/","__v":0,"createdAt":"2019-02-01T00:00:00.000Z","updatedAt":"2019-02-01T00:00:00.000Z"},{"schlagwoerter":["SOLO"],"autoren":[{"nachname":"Elfe","vorname":"Elfriede"}],"_id":"00000000-0000-0000-0000-000000000005","titel":"Elfenland","rating":2,"art":"BRETT","verlag":"SCHMIDT","preis":99.99,"rabatt":0.055,"lieferbar":true,"datum":"2019-02-05T00:00:00.000Z","homepage":"https://elfen.land/","__v":0,"createdAt":"2019-02-01T00:00:00.000Z","updatedAt":"2019-02-01T00:00:00.000Z"},{"schlagwoerter":["SOLO"],"autoren":[{"nachname":"Gras","vorname":"Gerda"}],"_id":"00000000-0000-0000-0000-000000000003","titel":"Grashuepfer","rating":1,"art":"KARTEN","verlag":"RAVENSBURGER","preis":4.2,"rabatt":0.033,"lieferbar":true,"datum":"2019-02-03T00:00:00.000Z","homepage":"https://gras.com/","__v":0,"createdAt":"2019-02-01T00:00:00.000Z","updatedAt":"2019-02-01T00:00:00.000Z"}] {"timestamp":"2019-11-03T10:50:16.795Z"}
debug: SpielRequestHandler.find(): payload=[object Object],[object Object],[object Object],[object Object] {"timestamp":"2019-11-03T10:50:16.795Z"}
debug: Response time: 10.883801 ms {"timestamp":"2019-11-03T10:50:16.796Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:16.806Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:16.806Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:16.806Z"}
debug: SpielRequestHandler.find(): queryParams={"titel":"XX"} {"timestamp":"2019-11-03T10:50:16.810Z"}
debug: SpielService.find(): query= [object Object] {"timestamp":"2019-11-03T10:50:16.810Z"}
debug: SpielService.find(): dbQuery=[object Object] {"timestamp":"2019-11-03T10:50:16.811Z"}
debug: SpielRequestHandler.find(): spiele=[] {"timestamp":"2019-11-03T10:50:16.814Z"}
debug: SpieleRequestHandler.find(): status = NOT_FOUND {"timestamp":"2019-11-03T10:50:16.814Z"}
debug: Response time: 8.886101 ms {"timestamp":"2019-11-03T10:50:16.815Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:16.826Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:16.826Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:16.826Z"}
debug: SpielRequestHandler.find(): queryParams={"solo":"true"} {"timestamp":"2019-11-03T10:50:16.830Z"}
debug: SpielService.find(): query= [object Object] {"timestamp":"2019-11-03T10:50:16.831Z"}
debug: SpielService.find(): dbQuery=[object Object] {"timestamp":"2019-11-03T10:50:16.831Z"}
debug: SpielRequestHandler.find(): spiele=[{"schlagwoerter":["SOLO"],"autoren":[{"nachname":"Auto","vorname":"Adriana"},{"nachname":"Auto","vorname":"Alfred"}],"_id":"00000000-0000-0000-0000-000000000001","titel":"Autoscooter","rating":4,"art":"BRETT","verlag":"RAVENSBURGER","preis":34.99,"rabatt":0.011,"lieferbar":true,"datum":"2019-02-01T00:00:00.000Z","homepage":"https://hska.at/","__v":0,"createdAt":"2019-02-01T00:00:00.000Z","updatedAt":"2019-02-01T00:00:00.000Z"},{"schlagwoerter":["SOLO"],"autoren":[{"nachname":"Gras","vorname":"Gerda"}],"_id":"00000000-0000-0000-0000-000000000003","titel":"Grashuepfer","rating":1,"art":"KARTEN","verlag":"RAVENSBURGER","preis":4.2,"rabatt":0.033,"lieferbar":true,"datum":"2019-02-03T00:00:00.000Z","homepage":"https://gras.com/","__v":0,"createdAt":"2019-02-01T00:00:00.000Z","updatedAt":"2019-02-01T00:00:00.000Z"},{"schlagwoerter":["SOLO"],"autoren":[{"nachname":"Elfe","vorname":"Elfriede"}],"_id":"00000000-0000-0000-0000-000000000005","titel":"Elfenland","rating":2,"art":"BRETT","verlag":"SCHMIDT","preis":99.99,"rabatt":0.055,"lieferbar":true,"datum":"2019-02-05T00:00:00.000Z","homepage":"https://elfen.land/","__v":0,"createdAt":"2019-02-01T00:00:00.000Z","updatedAt":"2019-02-01T00:00:00.000Z"}] {"timestamp":"2019-11-03T10:50:16.842Z"}
debug: SpielRequestHandler.find(): payload=[object Object],[object Object],[object Object] {"timestamp":"2019-11-03T10:50:16.843Z"}
debug: Response time: 18.5296 ms {"timestamp":"2019-11-03T10:50:16.844Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:16.857Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:16.858Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:16.858Z"}
debug: SpielRequestHandler.find(): queryParams={"team":"true"} {"timestamp":"2019-11-03T10:50:16.864Z"}
debug: SpielService.find(): query= [object Object] {"timestamp":"2019-11-03T10:50:16.865Z"}
debug: SpielService.find(): dbQuery=[object Object] {"timestamp":"2019-11-03T10:50:16.865Z"}
debug: SpielRequestHandler.find(): spiele=[{"schlagwoerter":["TEAM"],"autoren":[{"nachname":"Bibel","vorname":"Bernd"}],"_id":"00000000-0000-0000-0000-000000000002","titel":"Bibelquiz","rating":2,"art":"KARTEN","verlag":"RAVENSBURGER","preis":12.99,"rabatt":0.022,"lieferbar":true,"datum":"2019-02-02T00:00:00.000Z","homepage":"https://bibel.quiz/","__v":0,"createdAt":"2019-02-01T00:00:00.000Z","updatedAt":"2019-02-01T00:00:00.000Z"},{"schlagwoerter":["TEAM"],"autoren":[{"nachname":"Domino","vorname":"Dieter"}],"_id":"00000000-0000-0000-0000-000000000004","titel":"Domino","rating":3,"art":"BRETT","verlag":"RAVENSBURGER","preis":18,"rabatt":0.044,"lieferbar":true,"datum":"2019-02-04T00:00:00.000Z","homepage":"https://domino.day/","__v":0,"createdAt":"2019-02-01T00:00:00.000Z","updatedAt":"2019-02-01T00:00:00.000Z"}] {"timestamp":"2019-11-03T10:50:16.870Z"}
debug: SpielRequestHandler.find(): payload=[object Object],[object Object] {"timestamp":"2019-11-03T10:50:16.871Z"}
debug: Response time: 14.0924 ms {"timestamp":"2019-11-03T10:50:16.871Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "content-type": "application/x-www-form-urlencoded",
  "content-length": "25",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:16.894Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:16.894Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:16.894Z"}
debug: AuthService.checkPassword(): true {"timestamp":"2019-11-03T10:50:17.405Z"}
debug: AuthRequestHandler.login(): {"token":"eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzI3NzgyMTcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxIiwianRpIjoiZDkyMTViOTUtZTQxZi00ZWFmLTk1YTYtOWE0MmRjZTJiZWVkIiwiZXhwIjoxNTcyODY0NjE3fQ.IAN1Z6lldR5gaZmsLXFx0mEypAgGZCEdL0hci0SmcKafvmOqK3jUPj8vpuK3J87n9RJB_zZNKVO0j7Hv5cFRk7_iQuGpD0kRvXCvQ2fsGScFz9bRWyTotUnbnInyrDad7JO7K6bYylYzj-F9Gry5tMG0NelkoomejeeM-MorJV_ZNYvKZ2WCdbH3QhS1pRAArBFzywe5kCBtY8P53iMR81kAMkYZbFqpdqLDgbkS_krwWtSu-m1pNw8N5Jwq2iosOQQUE2dOrkbXqsj7GZcXOB75NHP-9MN5T9KneMXhUDclj6mPGZjXSmXV5fdDrSHXd-etIoNacIc6VBbW98Kg9Q","token_type":"Bearer","expires_in":86400,"roles":["admin","mitarbeiter","abteilungsleiter","kunde"]} {"timestamp":"2019-11-03T10:50:17.410Z"}
debug: Response time: 516.7340009999999 ms {"timestamp":"2019-11-03T10:50:17.411Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "authorization": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzI3NzgyMTcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxIiwianRpIjoiZDkyMTViOTUtZTQxZi00ZWFmLTk1YTYtOWE0MmRjZTJiZWVkIiwiZXhwIjoxNTcyODY0NjE3fQ.IAN1Z6lldR5gaZmsLXFx0mEypAgGZCEdL0hci0SmcKafvmOqK3jUPj8vpuK3J87n9RJB_zZNKVO0j7Hv5cFRk7_iQuGpD0kRvXCvQ2fsGScFz9bRWyTotUnbnInyrDad7JO7K6bYylYzj-F9Gry5tMG0NelkoomejeeM-MorJV_ZNYvKZ2WCdbH3QhS1pRAArBFzywe5kCBtY8P53iMR81kAMkYZbFqpdqLDgbkS_krwWtSu-m1pNw8N5Jwq2iosOQQUE2dOrkbXqsj7GZcXOB75NHP-9MN5T9KneMXhUDclj6mPGZjXSmXV5fdDrSHXd-etIoNacIc6VBbW98Kg9Q",
  "content-type": "application/json",
  "content-length": "247",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:17.418Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:17.418Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:17.418Z"}
debug: AuthRequestHandler.validateJwt(): 401: TokenInvalidError, Der Token-String ist mit RS256 nicht verifizierbar {"timestamp":"2019-11-03T10:50:17.425Z"}
debug: Response time: 7.543099 ms {"timestamp":"2019-11-03T10:50:17.425Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "authorization": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzI3NzgyMTcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxIiwianRpIjoiZDkyMTViOTUtZTQxZi00ZWFmLTk1YTYtOWE0MmRjZTJiZWVkIiwiZXhwIjoxNTcyODY0NjE3fQ.IAN1Z6lldR5gaZmsLXFx0mEypAgGZCEdL0hci0SmcKafvmOqK3jUPj8vpuK3J87n9RJB_zZNKVO0j7Hv5cFRk7_iQuGpD0kRvXCvQ2fsGScFz9bRWyTotUnbnInyrDad7JO7K6bYylYzj-F9Gry5tMG0NelkoomejeeM-MorJV_ZNYvKZ2WCdbH3QhS1pRAArBFzywe5kCBtY8P53iMR81kAMkYZbFqpdqLDgbkS_krwWtSu-m1pNw8N5Jwq2iosOQQUE2dOrkbXqsj7GZcXOB75NHP-9MN5T9KneMXhUDclj6mPGZjXSmXV5fdDrSHXd-etIoNacIc6VBbW98Kg9Q",
  "content-type": "application/json",
  "content-length": "210",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:17.435Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:17.435Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:17.435Z"}
debug: AuthRequestHandler.validateJwt(): 401: TokenInvalidError, Der Token-String ist mit RS256 nicht verifizierbar {"timestamp":"2019-11-03T10:50:17.444Z"}
debug: Response time: 9.136299 ms {"timestamp":"2019-11-03T10:50:17.444Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "authorization": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzI3NzgyMTcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxIiwianRpIjoiZDkyMTViOTUtZTQxZi00ZWFmLTk1YTYtOWE0MmRjZTJiZWVkIiwiZXhwIjoxNTcyODY0NjE3fQ.IAN1Z6lldR5gaZmsLXFx0mEypAgGZCEdL0hci0SmcKafvmOqK3jUPj8vpuK3J87n9RJB_zZNKVO0j7Hv5cFRk7_iQuGpD0kRvXCvQ2fsGScFz9bRWyTotUnbnInyrDad7JO7K6bYylYzj-F9Gry5tMG0NelkoomejeeM-MorJV_ZNYvKZ2WCdbH3QhS1pRAArBFzywe5kCBtY8P53iMR81kAMkYZbFqpdqLDgbkS_krwWtSu-m1pNw8N5Jwq2iosOQQUE2dOrkbXqsj7GZcXOB75NHP-9MN5T9KneMXhUDclj6mPGZjXSmXV5fdDrSHXd-etIoNacIc6VBbW98Kg9Q",
  "content-type": "application/json",
  "content-length": "223",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:17.464Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:17.465Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:17.466Z"}
debug: AuthRequestHandler.validateJwt(): 401: TokenInvalidError, Der Token-String ist mit RS256 nicht verifizierbar {"timestamp":"2019-11-03T10:50:17.472Z"}
debug: Response time: 8.3721 ms {"timestamp":"2019-11-03T10:50:17.473Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "content-type": "application/json",
  "content-length": "247",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:17.488Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:17.489Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:17.489Z"}
debug: AuthRequestHandler.validateJwt(): 401: AuthorizationInvalidError, Kein Header-Field Authorization {"timestamp":"2019-11-03T10:50:17.493Z"}
debug: Response time: 4.766598999999999 ms {"timestamp":"2019-11-03T10:50:17.493Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "authorization": "Bearer x",
  "content-type": "application/json",
  "content-length": "247",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:17.505Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:17.505Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:17.505Z"}
debug: AuthRequestHandler.validateJwt(): 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen. {"timestamp":"2019-11-03T10:50:17.507Z"}
debug: Response time: 2.9753 ms {"timestamp":"2019-11-03T10:50:17.508Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "content-type": "application/x-www-form-urlencoded",
  "content-length": "25",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:17.529Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:17.529Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:17.529Z"}
debug: AuthService.checkPassword(): true {"timestamp":"2019-11-03T10:50:17.900Z"}
debug: AuthRequestHandler.login(): {"token":"eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzI3NzgyMTcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxIiwianRpIjoiYjY1OTUxNzAtZTFlOC00Zjg4LWI5YWItMzc5ODMwN2YwYWU2IiwiZXhwIjoxNTcyODY0NjE3fQ.wnSmphKW7ZAhTWKgi6N-tx3nWxWWCqw3kk-YzsWqMN8d9Xpmfpin-DhVXXZgQcC9DsxDu2vsRa-PEWfacZ54by3axc-6_l7CCv5ywoL3pApApW5gXTbPvpwn_H_xQQjS73yoJq2rXRnVkdFL3Nd_JM-1uT64Di7hhSRwyS6mQ2MW4f4KqJB9rKvMGgJglvLXg2oGBxj6tzf0x_SbqGiV3-gkkfei6AHnFLS5eyhj8uz_Sf7aM9iO0jEw1PvMvk8jeLSOtoXLLv3_Y882rWoHVScW-1OvSifUtJk3u0m2awZJ2Zej70vRLSTHwRJgkPMdeIFP6jOc2qaQgK_Z8v_m4w","token_type":"Bearer","expires_in":86400,"roles":["admin","mitarbeiter","abteilungsleiter","kunde"]} {"timestamp":"2019-11-03T10:50:17.903Z"}
debug: Response time: 374.6996 ms {"timestamp":"2019-11-03T10:50:17.903Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "authorization": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzI3NzgyMTcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxIiwianRpIjoiYjY1OTUxNzAtZTFlOC00Zjg4LWI5YWItMzc5ODMwN2YwYWU2IiwiZXhwIjoxNTcyODY0NjE3fQ.wnSmphKW7ZAhTWKgi6N-tx3nWxWWCqw3kk-YzsWqMN8d9Xpmfpin-DhVXXZgQcC9DsxDu2vsRa-PEWfacZ54by3axc-6_l7CCv5ywoL3pApApW5gXTbPvpwn_H_xQQjS73yoJq2rXRnVkdFL3Nd_JM-1uT64Di7hhSRwyS6mQ2MW4f4KqJB9rKvMGgJglvLXg2oGBxj6tzf0x_SbqGiV3-gkkfei6AHnFLS5eyhj8uz_Sf7aM9iO0jEw1PvMvk8jeLSOtoXLLv3_Y882rWoHVScW-1OvSifUtJk3u0m2awZJ2Zej70vRLSTHwRJgkPMdeIFP6jOc2qaQgK_Z8v_m4w",
  "if-match": "\"0\"",
  "content-type": "application/json",
  "content-length": "244",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:17.908Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:17.908Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:17.908Z"}
error: SharedRequestHandler.internalError(): error=<ref *2> IncomingMessage {
  _readableState: ReadableState {
    objectMode: false,
    highWaterMark: 16384,
    buffer: BufferList { head: [Object], tail: [Object], length: 1 },
    length: 244,
    pipes: [],
    flowing: null,
    ended: false,
    endEmitted: false,
    reading: false,
    sync: true,
    needReadable: false,
    emittedReadable: false,
    readableListening: false,
    resumeScheduled: false,
    paused: true,
    errorEmitted: false,
    emitClose: true,
    autoDestroy: false,
    destroyed: false,
    defaultEncoding: 'utf8',
    awaitDrainWriters: null,
    multiAwaitDrain: false,
    readingMore: true,
    decoder: null,
    encoding: null
  },
  readable: true,
  _events: [Object: null prototype] {
    end: [Function: resetHeadersTimeoutOnReqEnd]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      paused: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Array],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      errored: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    _server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Circular *1],
      _header: null,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: [Circular *2],
      locals: [Object: null prototype] {},
      _startAt: undefined,
      _startTime: undefined,
      writeHead: [Function: writeHead],
      __onFinished: [Function],
      flush: [Function: flush],
      write: [Function: write],
      end: [Function: end],
      on: [Function: on],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    _peername: { address: '127.0.0.1', family: 'IPv4', port: 55976 },
    [Symbol(asyncId)]: 2980,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: {
    host: '127.0.0.1:55958',
    'accept-encoding': 'gzip, deflate',
    'user-agent': 'node-superagent/3.8.3',
    authorization: 'Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzI3NzgyMTcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxIiwianRpIjoiYjY1OTUxNzAtZTFlOC00Zjg4LWI5YWItMzc5ODMwN2YwYWU2IiwiZXhwIjoxNTcyODY0NjE3fQ.wnSmphKW7ZAhTWKgi6N-tx3nWxWWCqw3kk-YzsWqMN8d9Xpmfpin-DhVXXZgQcC9DsxDu2vsRa-PEWfacZ54by3axc-6_l7CCv5ywoL3pApApW5gXTbPvpwn_H_xQQjS73yoJq2rXRnVkdFL3Nd_JM-1uT64Di7hhSRwyS6mQ2MW4f4KqJB9rKvMGgJglvLXg2oGBxj6tzf0x_SbqGiV3-gkkfei6AHnFLS5eyhj8uz_Sf7aM9iO0jEw1PvMvk8jeLSOtoXLLv3_Y882rWoHVScW-1OvSifUtJk3u0m2awZJ2Zej70vRLSTHwRJgkPMdeIFP6jOc2qaQgK_Z8v_m4w',
    'if-match': '"0"',
    'content-type': 'application/json',
    'content-length': '244',
    connection: 'close'
  },
  rawHeaders: [
    'Host',
    '127.0.0.1:55958',
    'Accept-Encoding',
    'gzip, deflate',
    'User-Agent',
    'node-superagent/3.8.3',
    'Authorization',
    'Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzI3NzgyMTcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxIiwianRpIjoiYjY1OTUxNzAtZTFlOC00Zjg4LWI5YWItMzc5ODMwN2YwYWU2IiwiZXhwIjoxNTcyODY0NjE3fQ.wnSmphKW7ZAhTWKgi6N-tx3nWxWWCqw3kk-YzsWqMN8d9Xpmfpin-DhVXXZgQcC9DsxDu2vsRa-PEWfacZ54by3axc-6_l7CCv5ywoL3pApApW5gXTbPvpwn_H_xQQjS73yoJq2rXRnVkdFL3Nd_JM-1uT64Di7hhSRwyS6mQ2MW4f4KqJB9rKvMGgJglvLXg2oGBxj6tzf0x_SbqGiV3-gkkfei6AHnFLS5eyhj8uz_Sf7aM9iO0jEw1PvMvk8jeLSOtoXLLv3_Y882rWoHVScW-1OvSifUtJk3u0m2awZJ2Zej70vRLSTHwRJgkPMdeIFP6jOc2qaQgK_Z8v_m4w',
    'If-Match',
    '"0"',
    'Content-Type',
    'application/json',
    'Content-Length',
    '244',
    'Connection',
    'close'
  ],
  trailers: {},
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: '/spiele/00000000-0000-0000-0000-000000000003',
  method: 'PUT',
  statusCode: null,
  statusMessage: null,
  client: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      paused: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Array],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      errored: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    _server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Circular *1],
      _header: null,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: [Circular *2],
      locals: [Object: null prototype] {},
      _startAt: undefined,
      _startTime: undefined,
      writeHead: [Function: writeHead],
      __onFinished: [Function],
      flush: [Function: flush],
      write: [Function: write],
      end: [Function: end],
      on: [Function: on],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    _peername: { address: '127.0.0.1', family: 'IPv4', port: 55976 },
    [Symbol(asyncId)]: 2980,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/spiele/00000000-0000-0000-0000-000000000003',
  _parsedUrl: Url {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: null,
    query: null,
    pathname: '/spiele/00000000-0000-0000-0000-000000000003',
    path: '/spiele/00000000-0000-0000-0000-000000000003',
    href: '/spiele/00000000-0000-0000-0000-000000000003',
    _raw: '/spiele/00000000-0000-0000-0000-000000000003'
  },
  params: {},
  query: {},
  res: <ref *3> ServerResponse {
    _events: [Object: null prototype] {
      finish: [Array],
      end: [Function: onevent]
    },
    _eventsCount: 2,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *3],
      _peername: [Object],
      [Symbol(asyncId)]: 2980,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: null,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: [Circular *2],
    locals: [Object: null prototype] {},
    _startAt: undefined,
    _startTime: undefined,
    writeHead: [Function: writeHead],
    __onFinished: [Function: listener] { queue: [Array] },
    flush: [Function: flush],
    write: [Function: write],
    end: [Function: end],
    on: [Function: on],
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
      'content-security-policy': [Array],
      'x-content-security-policy': [Array],
      'x-webkit-csp': [Array],
      'x-xss-protection': [Array],
      'x-frame-options': [Array],
      'strict-transport-security': [Array],
      'x-content-type-options': [Array],
      'surrogate-control': [Array],
      'cache-control': [Array],
      pragma: [Array],
      expires: [Array],
      'x-ratelimit-limit': [Array],
      'x-ratelimit-remaining': [Array],
      date: [Array],
      'x-ratelimit-reset': [Array]
    }
  },
  _startAt: [ 411743, 808305599 ],
  _startTime: 2019-11-03T10:50:17.908Z,
  _remoteAddress: '127.0.0.1',
  rateLimit: {
    limit: 100,
    current: 16,
    remaining: 84,
    resetTime: 2019-11-03T11:05:15.116Z
  }
} {"timestamp":"2019-11-03T10:50:17.922Z"}
debug: Response time: 744.6452009999999 ms {"timestamp":"2019-11-03T10:50:18.653Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "authorization": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzI3NzgyMTcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxIiwianRpIjoiYjY1OTUxNzAtZTFlOC00Zjg4LWI5YWItMzc5ODMwN2YwYWU2IiwiZXhwIjoxNTcyODY0NjE3fQ.wnSmphKW7ZAhTWKgi6N-tx3nWxWWCqw3kk-YzsWqMN8d9Xpmfpin-DhVXXZgQcC9DsxDu2vsRa-PEWfacZ54by3axc-6_l7CCv5ywoL3pApApW5gXTbPvpwn_H_xQQjS73yoJq2rXRnVkdFL3Nd_JM-1uT64Di7hhSRwyS6mQ2MW4f4KqJB9rKvMGgJglvLXg2oGBxj6tzf0x_SbqGiV3-gkkfei6AHnFLS5eyhj8uz_Sf7aM9iO0jEw1PvMvk8jeLSOtoXLLv3_Y882rWoHVScW-1OvSifUtJk3u0m2awZJ2Zej70vRLSTHwRJgkPMdeIFP6jOc2qaQgK_Z8v_m4w",
  "if-match": "\"0\"",
  "content-type": "application/json",
  "content-length": "222",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:18.714Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:18.714Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:18.714Z"}
error: SharedRequestHandler.internalError(): error=<ref *2> IncomingMessage {
  _readableState: ReadableState {
    objectMode: false,
    highWaterMark: 16384,
    buffer: BufferList { head: [Object], tail: [Object], length: 1 },
    length: 222,
    pipes: [],
    flowing: null,
    ended: false,
    endEmitted: false,
    reading: false,
    sync: true,
    needReadable: false,
    emittedReadable: false,
    readableListening: false,
    resumeScheduled: false,
    paused: true,
    errorEmitted: false,
    emitClose: true,
    autoDestroy: false,
    destroyed: false,
    defaultEncoding: 'utf8',
    awaitDrainWriters: null,
    multiAwaitDrain: false,
    readingMore: true,
    decoder: null,
    encoding: null
  },
  readable: true,
  _events: [Object: null prototype] {
    end: [Function: resetHeadersTimeoutOnReqEnd]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      paused: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Array],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      errored: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    _server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Circular *1],
      _header: null,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: [Circular *2],
      locals: [Object: null prototype] {},
      _startAt: undefined,
      _startTime: undefined,
      writeHead: [Function: writeHead],
      __onFinished: [Function],
      flush: [Function: flush],
      write: [Function: write],
      end: [Function: end],
      on: [Function: on],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    _peername: { address: '127.0.0.1', family: 'IPv4', port: 55977 },
    [Symbol(asyncId)]: 3162,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: {
    host: '127.0.0.1:55958',
    'accept-encoding': 'gzip, deflate',
    'user-agent': 'node-superagent/3.8.3',
    authorization: 'Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzI3NzgyMTcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxIiwianRpIjoiYjY1OTUxNzAtZTFlOC00Zjg4LWI5YWItMzc5ODMwN2YwYWU2IiwiZXhwIjoxNTcyODY0NjE3fQ.wnSmphKW7ZAhTWKgi6N-tx3nWxWWCqw3kk-YzsWqMN8d9Xpmfpin-DhVXXZgQcC9DsxDu2vsRa-PEWfacZ54by3axc-6_l7CCv5ywoL3pApApW5gXTbPvpwn_H_xQQjS73yoJq2rXRnVkdFL3Nd_JM-1uT64Di7hhSRwyS6mQ2MW4f4KqJB9rKvMGgJglvLXg2oGBxj6tzf0x_SbqGiV3-gkkfei6AHnFLS5eyhj8uz_Sf7aM9iO0jEw1PvMvk8jeLSOtoXLLv3_Y882rWoHVScW-1OvSifUtJk3u0m2awZJ2Zej70vRLSTHwRJgkPMdeIFP6jOc2qaQgK_Z8v_m4w',
    'if-match': '"0"',
    'content-type': 'application/json',
    'content-length': '222',
    connection: 'close'
  },
  rawHeaders: [
    'Host',
    '127.0.0.1:55958',
    'Accept-Encoding',
    'gzip, deflate',
    'User-Agent',
    'node-superagent/3.8.3',
    'Authorization',
    'Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzI3NzgyMTcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxIiwianRpIjoiYjY1OTUxNzAtZTFlOC00Zjg4LWI5YWItMzc5ODMwN2YwYWU2IiwiZXhwIjoxNTcyODY0NjE3fQ.wnSmphKW7ZAhTWKgi6N-tx3nWxWWCqw3kk-YzsWqMN8d9Xpmfpin-DhVXXZgQcC9DsxDu2vsRa-PEWfacZ54by3axc-6_l7CCv5ywoL3pApApW5gXTbPvpwn_H_xQQjS73yoJq2rXRnVkdFL3Nd_JM-1uT64Di7hhSRwyS6mQ2MW4f4KqJB9rKvMGgJglvLXg2oGBxj6tzf0x_SbqGiV3-gkkfei6AHnFLS5eyhj8uz_Sf7aM9iO0jEw1PvMvk8jeLSOtoXLLv3_Y882rWoHVScW-1OvSifUtJk3u0m2awZJ2Zej70vRLSTHwRJgkPMdeIFP6jOc2qaQgK_Z8v_m4w',
    'If-Match',
    '"0"',
    'Content-Type',
    'application/json',
    'Content-Length',
    '222',
    'Connection',
    'close'
  ],
  trailers: {},
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: '/spiele/00000000-0000-0000-0000-000000000999',
  method: 'PUT',
  statusCode: null,
  statusMessage: null,
  client: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      paused: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Array],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      errored: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    _server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Circular *1],
      _header: null,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: [Circular *2],
      locals: [Object: null prototype] {},
      _startAt: undefined,
      _startTime: undefined,
      writeHead: [Function: writeHead],
      __onFinished: [Function],
      flush: [Function: flush],
      write: [Function: write],
      end: [Function: end],
      on: [Function: on],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    _peername: { address: '127.0.0.1', family: 'IPv4', port: 55977 },
    [Symbol(asyncId)]: 3162,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/spiele/00000000-0000-0000-0000-000000000999',
  _parsedUrl: Url {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: null,
    query: null,
    pathname: '/spiele/00000000-0000-0000-0000-000000000999',
    path: '/spiele/00000000-0000-0000-0000-000000000999',
    href: '/spiele/00000000-0000-0000-0000-000000000999',
    _raw: '/spiele/00000000-0000-0000-0000-000000000999'
  },
  params: {},
  query: {},
  res: <ref *3> ServerResponse {
    _events: [Object: null prototype] {
      finish: [Array],
      end: [Function: onevent]
    },
    _eventsCount: 2,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *3],
      _peername: [Object],
      [Symbol(asyncId)]: 3162,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: null,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: [Circular *2],
    locals: [Object: null prototype] {},
    _startAt: undefined,
    _startTime: undefined,
    writeHead: [Function: writeHead],
    __onFinished: [Function: listener] { queue: [Array] },
    flush: [Function: flush],
    write: [Function: write],
    end: [Function: end],
    on: [Function: on],
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
      'content-security-policy': [Array],
      'x-content-security-policy': [Array],
      'x-webkit-csp': [Array],
      'x-xss-protection': [Array],
      'x-frame-options': [Array],
      'strict-transport-security': [Array],
      'x-content-type-options': [Array],
      'surrogate-control': [Array],
      'cache-control': [Array],
      pragma: [Array],
      expires: [Array],
      'x-ratelimit-limit': [Array],
      'x-ratelimit-remaining': [Array],
      date: [Array],
      'x-ratelimit-reset': [Array]
    }
  },
  _startAt: [ 411744, 614004100 ],
  _startTime: 2019-11-03T10:50:18.714Z,
  _remoteAddress: '127.0.0.1',
  rateLimit: {
    limit: 100,
    current: 17,
    remaining: 83,
    resetTime: 2019-11-03T11:05:15.116Z
  }
} {"timestamp":"2019-11-03T10:50:18.718Z"}
debug: Response time: 702.6972 ms {"timestamp":"2019-11-03T10:50:19.416Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "authorization": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzI3NzgyMTcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxIiwianRpIjoiYjY1OTUxNzAtZTFlOC00Zjg4LWI5YWItMzc5ODMwN2YwYWU2IiwiZXhwIjoxNTcyODY0NjE3fQ.wnSmphKW7ZAhTWKgi6N-tx3nWxWWCqw3kk-YzsWqMN8d9Xpmfpin-DhVXXZgQcC9DsxDu2vsRa-PEWfacZ54by3axc-6_l7CCv5ywoL3pApApW5gXTbPvpwn_H_xQQjS73yoJq2rXRnVkdFL3Nd_JM-1uT64Di7hhSRwyS6mQ2MW4f4KqJB9rKvMGgJglvLXg2oGBxj6tzf0x_SbqGiV3-gkkfei6AHnFLS5eyhj8uz_Sf7aM9iO0jEw1PvMvk8jeLSOtoXLLv3_Y882rWoHVScW-1OvSifUtJk3u0m2awZJ2Zej70vRLSTHwRJgkPMdeIFP6jOc2qaQgK_Z8v_m4w",
  "if-match": "\"0\"",
  "content-type": "application/json",
  "content-length": "197",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:19.484Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:19.485Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:19.485Z"}
error: SharedRequestHandler.internalError(): error=<ref *2> IncomingMessage {
  _readableState: ReadableState {
    objectMode: false,
    highWaterMark: 16384,
    buffer: BufferList { head: [Object], tail: [Object], length: 1 },
    length: 197,
    pipes: [],
    flowing: null,
    ended: false,
    endEmitted: false,
    reading: false,
    sync: true,
    needReadable: false,
    emittedReadable: false,
    readableListening: false,
    resumeScheduled: false,
    paused: true,
    errorEmitted: false,
    emitClose: true,
    autoDestroy: false,
    destroyed: false,
    defaultEncoding: 'utf8',
    awaitDrainWriters: null,
    multiAwaitDrain: false,
    readingMore: true,
    decoder: null,
    encoding: null
  },
  readable: true,
  _events: [Object: null prototype] {
    end: [Function: resetHeadersTimeoutOnReqEnd]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      paused: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Array],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      errored: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    _server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Circular *1],
      _header: null,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: [Circular *2],
      locals: [Object: null prototype] {},
      _startAt: undefined,
      _startTime: undefined,
      writeHead: [Function: writeHead],
      __onFinished: [Function],
      flush: [Function: flush],
      write: [Function: write],
      end: [Function: end],
      on: [Function: on],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    _peername: { address: '127.0.0.1', family: 'IPv4', port: 55978 },
    [Symbol(asyncId)]: 3345,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: {
    host: '127.0.0.1:55958',
    'accept-encoding': 'gzip, deflate',
    'user-agent': 'node-superagent/3.8.3',
    authorization: 'Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzI3NzgyMTcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxIiwianRpIjoiYjY1OTUxNzAtZTFlOC00Zjg4LWI5YWItMzc5ODMwN2YwYWU2IiwiZXhwIjoxNTcyODY0NjE3fQ.wnSmphKW7ZAhTWKgi6N-tx3nWxWWCqw3kk-YzsWqMN8d9Xpmfpin-DhVXXZgQcC9DsxDu2vsRa-PEWfacZ54by3axc-6_l7CCv5ywoL3pApApW5gXTbPvpwn_H_xQQjS73yoJq2rXRnVkdFL3Nd_JM-1uT64Di7hhSRwyS6mQ2MW4f4KqJB9rKvMGgJglvLXg2oGBxj6tzf0x_SbqGiV3-gkkfei6AHnFLS5eyhj8uz_Sf7aM9iO0jEw1PvMvk8jeLSOtoXLLv3_Y882rWoHVScW-1OvSifUtJk3u0m2awZJ2Zej70vRLSTHwRJgkPMdeIFP6jOc2qaQgK_Z8v_m4w',
    'if-match': '"0"',
    'content-type': 'application/json',
    'content-length': '197',
    connection: 'close'
  },
  rawHeaders: [
    'Host',
    '127.0.0.1:55958',
    'Accept-Encoding',
    'gzip, deflate',
    'User-Agent',
    'node-superagent/3.8.3',
    'Authorization',
    'Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzI3NzgyMTcsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxIiwianRpIjoiYjY1OTUxNzAtZTFlOC00Zjg4LWI5YWItMzc5ODMwN2YwYWU2IiwiZXhwIjoxNTcyODY0NjE3fQ.wnSmphKW7ZAhTWKgi6N-tx3nWxWWCqw3kk-YzsWqMN8d9Xpmfpin-DhVXXZgQcC9DsxDu2vsRa-PEWfacZ54by3axc-6_l7CCv5ywoL3pApApW5gXTbPvpwn_H_xQQjS73yoJq2rXRnVkdFL3Nd_JM-1uT64Di7hhSRwyS6mQ2MW4f4KqJB9rKvMGgJglvLXg2oGBxj6tzf0x_SbqGiV3-gkkfei6AHnFLS5eyhj8uz_Sf7aM9iO0jEw1PvMvk8jeLSOtoXLLv3_Y882rWoHVScW-1OvSifUtJk3u0m2awZJ2Zej70vRLSTHwRJgkPMdeIFP6jOc2qaQgK_Z8v_m4w',
    'If-Match',
    '"0"',
    'Content-Type',
    'application/json',
    'Content-Length',
    '197',
    'Connection',
    'close'
  ],
  trailers: {},
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: '/spiele/00000000-0000-0000-0000-000000000003',
  method: 'PUT',
  statusCode: null,
  statusMessage: null,
  client: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      paused: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Array],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      errored: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    _server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Circular *1],
      _header: null,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: [Circular *2],
      locals: [Object: null prototype] {},
      _startAt: undefined,
      _startTime: undefined,
      writeHead: [Function: writeHead],
      __onFinished: [Function],
      flush: [Function: flush],
      write: [Function: write],
      end: [Function: end],
      on: [Function: on],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    _peername: { address: '127.0.0.1', family: 'IPv4', port: 55978 },
    [Symbol(asyncId)]: 3345,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/spiele/00000000-0000-0000-0000-000000000003',
  _parsedUrl: Url {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: null,
    query: null,
    pathname: '/spiele/00000000-0000-0000-0000-000000000003',
    path: '/spiele/00000000-0000-0000-0000-000000000003',
    href: '/spiele/00000000-0000-0000-0000-000000000003',
    _raw: '/spiele/00000000-0000-0000-0000-000000000003'
  },
  params: {},
  query: {},
  res: <ref *3> ServerResponse {
    _events: [Object: null prototype] {
      finish: [Array],
      end: [Function: onevent]
    },
    _eventsCount: 2,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *3],
      _peername: [Object],
      [Symbol(asyncId)]: 3345,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: null,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: [Circular *2],
    locals: [Object: null prototype] {},
    _startAt: undefined,
    _startTime: undefined,
    writeHead: [Function: writeHead],
    __onFinished: [Function: listener] { queue: [Array] },
    flush: [Function: flush],
    write: [Function: write],
    end: [Function: end],
    on: [Function: on],
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
      'content-security-policy': [Array],
      'x-content-security-policy': [Array],
      'x-webkit-csp': [Array],
      'x-xss-protection': [Array],
      'x-frame-options': [Array],
      'strict-transport-security': [Array],
      'x-content-type-options': [Array],
      'surrogate-control': [Array],
      'cache-control': [Array],
      pragma: [Array],
      expires: [Array],
      'x-ratelimit-limit': [Array],
      'x-ratelimit-remaining': [Array],
      date: [Array],
      'x-ratelimit-reset': [Array]
    }
  },
  _startAt: [ 411745, 384784200 ],
  _startTime: 2019-11-03T10:50:19.484Z,
  _remoteAddress: '127.0.0.1',
  rateLimit: {
    limit: 100,
    current: 18,
    remaining: 82,
    resetTime: 2019-11-03T11:05:15.116Z
  }
} {"timestamp":"2019-11-03T10:50:19.492Z"}
debug: Response time: 777.9901 ms {"timestamp":"2019-11-03T10:50:20.262Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "if-match": "\"0\"",
  "content-type": "application/json",
  "content-length": "244",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:20.368Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:20.368Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:20.368Z"}
error: SharedRequestHandler.internalError(): error=<ref *2> IncomingMessage {
  _readableState: ReadableState {
    objectMode: false,
    highWaterMark: 16384,
    buffer: BufferList { head: [Object], tail: [Object], length: 1 },
    length: 244,
    pipes: [],
    flowing: null,
    ended: false,
    endEmitted: false,
    reading: false,
    sync: true,
    needReadable: false,
    emittedReadable: false,
    readableListening: false,
    resumeScheduled: false,
    paused: true,
    errorEmitted: false,
    emitClose: true,
    autoDestroy: false,
    destroyed: false,
    defaultEncoding: 'utf8',
    awaitDrainWriters: null,
    multiAwaitDrain: false,
    readingMore: true,
    decoder: null,
    encoding: null
  },
  readable: true,
  _events: [Object: null prototype] {
    end: [Function: resetHeadersTimeoutOnReqEnd]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      paused: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Array],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      errored: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    _server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Circular *1],
      _header: null,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: [Circular *2],
      locals: [Object: null prototype] {},
      _startAt: undefined,
      _startTime: undefined,
      writeHead: [Function: writeHead],
      __onFinished: [Function],
      flush: [Function: flush],
      write: [Function: write],
      end: [Function: end],
      on: [Function: on],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    _peername: { address: '127.0.0.1', family: 'IPv4', port: 55980 },
    [Symbol(asyncId)]: 3528,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: {
    host: '127.0.0.1:55958',
    'accept-encoding': 'gzip, deflate',
    'user-agent': 'node-superagent/3.8.3',
    'if-match': '"0"',
    'content-type': 'application/json',
    'content-length': '244',
    connection: 'close'
  },
  rawHeaders: [
    'Host',
    '127.0.0.1:55958',
    'Accept-Encoding',
    'gzip, deflate',
    'User-Agent',
    'node-superagent/3.8.3',
    'If-Match',
    '"0"',
    'Content-Type',
    'application/json',
    'Content-Length',
    '244',
    'Connection',
    'close'
  ],
  trailers: {},
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: '/spiele/00000000-0000-0000-0000-000000000003',
  method: 'PUT',
  statusCode: null,
  statusMessage: null,
  client: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      paused: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Array],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      errored: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    _server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Circular *1],
      _header: null,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: [Circular *2],
      locals: [Object: null prototype] {},
      _startAt: undefined,
      _startTime: undefined,
      writeHead: [Function: writeHead],
      __onFinished: [Function],
      flush: [Function: flush],
      write: [Function: write],
      end: [Function: end],
      on: [Function: on],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    _peername: { address: '127.0.0.1', family: 'IPv4', port: 55980 },
    [Symbol(asyncId)]: 3528,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/spiele/00000000-0000-0000-0000-000000000003',
  _parsedUrl: Url {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: null,
    query: null,
    pathname: '/spiele/00000000-0000-0000-0000-000000000003',
    path: '/spiele/00000000-0000-0000-0000-000000000003',
    href: '/spiele/00000000-0000-0000-0000-000000000003',
    _raw: '/spiele/00000000-0000-0000-0000-000000000003'
  },
  params: {},
  query: {},
  res: <ref *3> ServerResponse {
    _events: [Object: null prototype] {
      finish: [Array],
      end: [Function: onevent]
    },
    _eventsCount: 2,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *3],
      _peername: [Object],
      [Symbol(asyncId)]: 3528,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: null,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: [Circular *2],
    locals: [Object: null prototype] {},
    _startAt: undefined,
    _startTime: undefined,
    writeHead: [Function: writeHead],
    __onFinished: [Function: listener] { queue: [Array] },
    flush: [Function: flush],
    write: [Function: write],
    end: [Function: end],
    on: [Function: on],
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
      'content-security-policy': [Array],
      'x-content-security-policy': [Array],
      'x-webkit-csp': [Array],
      'x-xss-protection': [Array],
      'x-frame-options': [Array],
      'strict-transport-security': [Array],
      'x-content-type-options': [Array],
      'surrogate-control': [Array],
      'cache-control': [Array],
      pragma: [Array],
      expires: [Array],
      'x-ratelimit-limit': [Array],
      'x-ratelimit-remaining': [Array],
      date: [Array],
      'x-ratelimit-reset': [Array]
    }
  },
  _startAt: [ 411746, 268176400 ],
  _startTime: 2019-11-03T10:50:20.368Z,
  _remoteAddress: '127.0.0.1',
  rateLimit: {
    limit: 100,
    current: 19,
    remaining: 81,
    resetTime: 2019-11-03T11:05:15.116Z
  }
} {"timestamp":"2019-11-03T10:50:20.382Z"}
debug: Response time: 842.6907 ms {"timestamp":"2019-11-03T10:50:21.211Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "authorization": "Bearer x",
  "if-match": "\"0\"",
  "content-type": "application/json",
  "content-length": "244",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:21.303Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:21.304Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:21.304Z"}
error: SharedRequestHandler.internalError(): error=<ref *2> IncomingMessage {
  _readableState: ReadableState {
    objectMode: false,
    highWaterMark: 16384,
    buffer: BufferList { head: [Object], tail: [Object], length: 1 },
    length: 244,
    pipes: [],
    flowing: null,
    ended: false,
    endEmitted: false,
    reading: false,
    sync: true,
    needReadable: false,
    emittedReadable: false,
    readableListening: false,
    resumeScheduled: false,
    paused: true,
    errorEmitted: false,
    emitClose: true,
    autoDestroy: false,
    destroyed: false,
    defaultEncoding: 'utf8',
    awaitDrainWriters: null,
    multiAwaitDrain: false,
    readingMore: true,
    decoder: null,
    encoding: null
  },
  readable: true,
  _events: [Object: null prototype] {
    end: [Function: resetHeadersTimeoutOnReqEnd]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      paused: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Array],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      errored: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    _server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Circular *1],
      _header: null,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: [Circular *2],
      locals: [Object: null prototype] {},
      _startAt: undefined,
      _startTime: undefined,
      writeHead: [Function: writeHead],
      __onFinished: [Function],
      flush: [Function: flush],
      write: [Function: write],
      end: [Function: end],
      on: [Function: on],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    _peername: { address: '127.0.0.1', family: 'IPv4', port: 55982 },
    [Symbol(asyncId)]: 3711,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: {
    host: '127.0.0.1:55958',
    'accept-encoding': 'gzip, deflate',
    'user-agent': 'node-superagent/3.8.3',
    authorization: 'Bearer x',
    'if-match': '"0"',
    'content-type': 'application/json',
    'content-length': '244',
    connection: 'close'
  },
  rawHeaders: [
    'Host',
    '127.0.0.1:55958',
    'Accept-Encoding',
    'gzip, deflate',
    'User-Agent',
    'node-superagent/3.8.3',
    'Authorization',
    'Bearer x',
    'If-Match',
    '"0"',
    'Content-Type',
    'application/json',
    'Content-Length',
    '244',
    'Connection',
    'close'
  ],
  trailers: {},
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: '/spiele/00000000-0000-0000-0000-000000000003',
  method: 'PUT',
  statusCode: null,
  statusMessage: null,
  client: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      paused: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Array],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      errored: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    _server: Server {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 40000,
      _connectionKey: '4:127.0.0.1:0',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(asyncId)]: 156
    },
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Circular *1],
      _header: null,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      req: [Circular *2],
      locals: [Object: null prototype] {},
      _startAt: undefined,
      _startTime: undefined,
      writeHead: [Function: writeHead],
      __onFinished: [Function],
      flush: [Function: flush],
      write: [Function: write],
      end: [Function: end],
      on: [Function: on],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    _peername: { address: '127.0.0.1', family: 'IPv4', port: 55982 },
    [Symbol(asyncId)]: 3711,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/spiele/00000000-0000-0000-0000-000000000003',
  _parsedUrl: Url {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: null,
    query: null,
    pathname: '/spiele/00000000-0000-0000-0000-000000000003',
    path: '/spiele/00000000-0000-0000-0000-000000000003',
    href: '/spiele/00000000-0000-0000-0000-000000000003',
    _raw: '/spiele/00000000-0000-0000-0000-000000000003'
  },
  params: {},
  query: {},
  res: <ref *3> ServerResponse {
    _events: [Object: null prototype] {
      finish: [Array],
      end: [Function: onevent]
    },
    _eventsCount: 2,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *3],
      _peername: [Object],
      [Symbol(asyncId)]: 3711,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: null,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    req: [Circular *2],
    locals: [Object: null prototype] {},
    _startAt: undefined,
    _startTime: undefined,
    writeHead: [Function: writeHead],
    __onFinished: [Function: listener] { queue: [Array] },
    flush: [Function: flush],
    write: [Function: write],
    end: [Function: end],
    on: [Function: on],
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
      'content-security-policy': [Array],
      'x-content-security-policy': [Array],
      'x-webkit-csp': [Array],
      'x-xss-protection': [Array],
      'x-frame-options': [Array],
      'strict-transport-security': [Array],
      'x-content-type-options': [Array],
      'surrogate-control': [Array],
      'cache-control': [Array],
      pragma: [Array],
      expires: [Array],
      'x-ratelimit-limit': [Array],
      'x-ratelimit-remaining': [Array],
      date: [Array],
      'x-ratelimit-reset': [Array]
    }
  },
  _startAt: [ 411747, 203276200 ],
  _startTime: 2019-11-03T10:50:21.303Z,
  _remoteAddress: '127.0.0.1',
  rateLimit: {
    limit: 100,
    current: 20,
    remaining: 80,
    resetTime: 2019-11-03T11:05:15.116Z
  }
} {"timestamp":"2019-11-03T10:50:21.314Z"}
debug: Response time: 893.2448999999999 ms {"timestamp":"2019-11-03T10:50:22.196Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "content-type": "application/x-www-form-urlencoded",
  "content-length": "25",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:22.287Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:22.287Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:22.287Z"}
debug: AuthService.checkPassword(): true {"timestamp":"2019-11-03T10:50:22.656Z"}
debug: AuthRequestHandler.login(): {"token":"eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzI3NzgyMjIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxIiwianRpIjoiZWE0YWY3ZTEtMDU2MS00OTg1LWI4NTAtMWY5OTQ5NmE0ZWJmIiwiZXhwIjoxNTcyODY0NjIyfQ.Z-I572Ghwhq5n-HBJG9_UihOFjog1_K8XypX20xc9eTh-Mn1T0vLIQLEhHa9jXAE78mzVsbo3ox9sGRqF_fPHMw_uhGMBhNci3nwGEWUA0I2Gk5TGt1NywEG3ptlNIDF-qs7osoVzz20HuMM3ssMWSYeEJ4fJ1UYtYRg8JuFAoAj9RViUvSxxLFThD3Bh1IRSk_jAkzd-KKRMAY-Be_uUgcCxsBUdldwmwy28VJaC6DwZWPVX4TJH2CVDqeqdVqzJSRR7qA0JOS8YE3uRjQMLNWlSzW9Ckm_jumOt7q_-KRNf-1N5KTv7YUbC81QgsYho1eL5kMIvxkcqpy4sNkgMA","token_type":"Bearer","expires_in":86400,"roles":["admin","mitarbeiter","abteilungsleiter","kunde"]} {"timestamp":"2019-11-03T10:50:22.658Z"}
debug: Response time: 371.089301 ms {"timestamp":"2019-11-03T10:50:22.658Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "authorization": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzI3NzgyMjIsImlzcyI6Imh0dHBzOi8vaHNrYS5kZS9zaG9wL0p1ZXJnZW5aaW1tZXJtYW5uIiwic3ViIjoiMjAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAxIiwianRpIjoiZWE0YWY3ZTEtMDU2MS00OTg1LWI4NTAtMWY5OTQ5NmE0ZWJmIiwiZXhwIjoxNTcyODY0NjIyfQ.Z-I572Ghwhq5n-HBJG9_UihOFjog1_K8XypX20xc9eTh-Mn1T0vLIQLEhHa9jXAE78mzVsbo3ox9sGRqF_fPHMw_uhGMBhNci3nwGEWUA0I2Gk5TGt1NywEG3ptlNIDF-qs7osoVzz20HuMM3ssMWSYeEJ4fJ1UYtYRg8JuFAoAj9RViUvSxxLFThD3Bh1IRSk_jAkzd-KKRMAY-Be_uUgcCxsBUdldwmwy28VJaC6DwZWPVX4TJH2CVDqeqdVqzJSRR7qA0JOS8YE3uRjQMLNWlSzW9Ckm_jumOt7q_-KRNf-1N5KTv7YUbC81QgsYho1eL5kMIvxkcqpy4sNkgMA",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:22.664Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:22.664Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:22.664Z"}
debug: SharedRequestHandler.validateUUID(): isUUID {"timestamp":"2019-11-03T10:50:22.665Z"}
debug: AuthRequestHandler.validateJwt(): 401: TokenInvalidError, Der Token-String ist mit RS256 nicht verifizierbar {"timestamp":"2019-11-03T10:50:22.666Z"}
debug: Response time: 1.7305 ms {"timestamp":"2019-11-03T10:50:22.666Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:22.675Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:22.675Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:22.676Z"}
debug: SharedRequestHandler.validateUUID(): isUUID {"timestamp":"2019-11-03T10:50:22.677Z"}
debug: AuthRequestHandler.validateJwt(): 401: AuthorizationInvalidError, Kein Header-Field Authorization {"timestamp":"2019-11-03T10:50:22.677Z"}
debug: Response time: 1.501299 ms {"timestamp":"2019-11-03T10:50:22.677Z"}
debug: Request: headers={
  "host": "127.0.0.1:55958",
  "accept-encoding": "gzip, deflate",
  "user-agent": "node-superagent/3.8.3",
  "authorization": "Bearer x",
  "connection": "close"
} {"timestamp":"2019-11-03T10:50:22.687Z"}
debug: Request: protocol="http" {"timestamp":"2019-11-03T10:50:22.687Z"}
debug: Request: hostname="127.0.0.1" {"timestamp":"2019-11-03T10:50:22.687Z"}
debug: SharedRequestHandler.validateUUID(): isUUID {"timestamp":"2019-11-03T10:50:22.688Z"}
debug: AuthRequestHandler.validateJwt(): 401: TokenInvalidError, Der Token besteht nicht aus 3 Teilen. {"timestamp":"2019-11-03T10:50:22.688Z"}
debug: Response time: 1.6985999999999999 ms {"timestamp":"2019-11-03T10:50:22.688Z"}
